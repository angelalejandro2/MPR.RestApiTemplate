param(
    [Parameter(Mandatory = $true)]
    [string]$SourceName,            # Ej: MPR.RestApiTemplate

    [Parameter(Mandatory = $false)]
    [string]$OutputPath = "./output"
)

function Clean-Directory {
    Write-Host "üßπ Limpiando archivos innecesarios..."
    Get-ChildItem -Recurse -Include bin, obj, .vs, .vscode, TestResults | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
    Get-ChildItem -Recurse -Include *.user, *.suo, launchSettings.json | Remove-Item -Force -ErrorAction SilentlyContinue
}

function Replace-Names {
    Write-Host "‚úèÔ∏è Reemplazando '$SourceName' ‚Üí '{{SolutionName}}' en archivos..."

    $allFiles = Get-ChildItem -Recurse -File -Include *.cs, *.csproj, *.sln, *.json, *.cshtml, *.config, *.yml

    foreach ($file in $allFiles) {
        (Get-Content $file.FullName) -replace $SourceName, "{{SolutionName}}" | Set-Content $file.FullName
    }

    Write-Host "üìÅ Renombrando carpetas..."
    $folders = Get-ChildItem -Recurse -Directory | Where-Object { $_.Name -like "*$SourceName*" }
    foreach ($folder in $folders) {
        $newName = $folder.Name -replace [regex]::Escape($SourceName), "{{SolutionName}}"
        Rename-Item -Path $folder.FullName -NewName $newName -Force
    }

    Write-Host "üìÑ Renombrando archivos..."
    $files = Get-ChildItem -Recurse -File | Where-Object { $_.Name -like "*$SourceName*" }
    foreach ($file in $files) {
        $newName = $file.Name -replace [regex]::Escape($SourceName), "{{SolutionName}}"
        Rename-Item -Path $file.FullName -NewName $newName -Force
    }
}

function Copy-To-Output {
    if (Test-Path $OutputPath) {
        Remove-Item -Recurse -Force $OutputPath
    }

    Write-Host "üì¶ Copiando soluci√≥n a '$OutputPath'..."
    Copy-Item * $OutputPath -Recurse -Force -Exclude .git, .gitignore
}

# === EJECUCI√ìN ===

$ErrorActionPreference = "Stop"

Clean-Directory
Replace-Names
Copy-To-Output

Write-Host "`n‚úÖ Plantilla lista en '$OutputPath'"
Write-Host "Puedes instalarla con:"
Write-Host "   dotnet new --install $OutputPath"
Write-Host "Y usarla con:"
Write-Host "   dotnet new [shortname] -n MiProyecto"