<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#+
    #nullable enable
    
    // Clases para la configuración
    public class CodeGenConfig
    {
        public DefaultsConfig? defaults { get; set; }
        public Dictionary<string, EntityConfig>? entities { get; set; }
        public Dictionary<string, ContextConfig>? contexts { get; set; }

        public CodeGenConfig()
        {
            defaults = new DefaultsConfig();
            entities = new Dictionary<string, EntityConfig>();
            contexts = new Dictionary<string, ContextConfig>();
        }
    }

    public class DefaultsConfig
    {
        public MethodsConfig? generateMethods { get; set; }
        public MethodsConfig? requireKeysFor { get; set; }
        public MethodsConfig? generatePolicies { get; set; }

        public DefaultsConfig()
        {
            generateMethods = new MethodsConfig();
            requireKeysFor = new MethodsConfig();
            generatePolicies = new MethodsConfig();
        }
    }

    public class MethodsConfig
    {
        public bool get { get; set; } = true;
        public bool getById { get; set; } = true;
        public bool post { get; set; } = true;
        public bool put { get; set; } = true;
        public bool delete { get; set; } = true;
    }

    public class EntityConfig
    {
        public string? dto { get; set; }
        public string? createDto { get; set; }
        public string? updateDto { get; set; }
        public List<string>? includes { get; set; }
        public Dictionary<string, string>? mappings { get; set; }
        public MethodsConfig? generateMethods { get; set; }
        public Dictionary<string, string>? policies { get; set; }

        public EntityConfig()
        {
            includes = new List<string>();
            mappings = new Dictionary<string, string>();
            generateMethods = new MethodsConfig();
            policies = new Dictionary<string, string>();
        }
    }

    public class ContextConfig
    {
        public string? provider { get; set; }
        public List<string>? entities { get; set; }

        public ContextConfig()
        {
            entities = new List<string>();
        }
    }

    // Parser YAML simplificado
    public CodeGenConfig LoadYamlConfig(string hostTemplateFile)
    {
        string yamlPath = Path.Combine(Path.GetDirectoryName(hostTemplateFile), "mpr.codegen.yaml");
        
        // Verificar si el archivo existe
        if (!File.Exists(yamlPath))
        {
            // Devolver una configuración vacía si no existe el archivo
            return new CodeGenConfig();
        }

        try
        {
            var config = new CodeGenConfig();
            string[] lines = File.ReadAllLines(yamlPath);
            
            // Variables para seguir el estado del parsing
            Stack<string> sections = new Stack<string>();
            string currentSection = "";
            string currentEntity = "";
            int currentIndent = 0;
            
            foreach (string line in lines)
            {
                if (string.IsNullOrWhiteSpace(line) || line.Trim().StartsWith("#"))
                    continue;
                
                // Calcular indentación
                int indent = line.Length - line.TrimStart().Length;
                string trimmedLine = line.Trim();
                
                // Si la indentación disminuye, salimos de las secciones actuales
                while (indent < currentIndent && sections.Count > 0)
                {
                    sections.Pop();
                    currentIndent -= 2; // Asumimos indentación de 2 espacios
                }
                
                // Determinar sección actual basada en la indentación
                if (indent == 0)
                {
                    // Nivel raíz
                    if (trimmedLine.EndsWith(":"))
                    {
                        sections.Clear();
                        currentSection = trimmedLine.TrimEnd(':');
                        sections.Push(currentSection);
                        currentIndent = 2;
                    }
                }
                else if (sections.Count > 0)
                {
                    // Procesar subsecciones
                    currentSection = sections.Peek();
                    
                    if (trimmedLine.EndsWith(":"))
                    {
                        // Nueva subsección
                        string subSection = trimmedLine.TrimEnd(':');
                        
                        // Manejar entidades
                        if (currentSection == "entities" && indent == 2)
                        {
                            currentEntity = subSection;
                            config.entities[currentEntity] = new EntityConfig();
                            sections.Push(currentEntity);
                            currentIndent = 4;
                        }
                        // Manejar contextos
                        else if (currentSection == "contexts" && indent == 2)
                        {
                            string contextName = subSection;
                            config.contexts[contextName] = new ContextConfig();
                            sections.Push(contextName);
                            currentIndent = 4;
                        }
                        // Otras subsecciones
                        else if (trimmedLine.EndsWith(":"))
                        {
                            sections.Push(subSection);
                            currentIndent = indent + 2;
                        }
                    }
                    else
                    {
                        // Procesar valores
                        string[] parts = trimmedLine.Split(new[] { ':' }, 2);
                        if (parts.Length == 2)
                        {
                            string key = parts[0].Trim();
                            string value = parts[1].Trim();
                            
                            // Procesar según la sección actual
                            if (currentSection == "defaults")
                            {
                                ProcessDefaultsConfig(config, sections, key, value);
                            }
                            else if (currentSection == "entities")
                            {
                                ProcessEntityConfig(config, sections, key, value);
                            }
                            else if (currentSection == "contexts")
                            {
                                ProcessContextConfig(config, sections, key, value);
                            }
                        }
                    }
                }
            }
            
            return config;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error al cargar el archivo YAML: {ex.Message}");
            return new CodeGenConfig();
        }
    }
    
    // Procesar configuración por defecto
    private void ProcessDefaultsConfig(CodeGenConfig config, Stack<string> sections, string key, string value)
    {
        if (sections.Count >= 2)
        {
            string section = sections.ElementAt(1);
            
            if (section == "generateMethods" || section == "requireKeysFor" || section == "generatePolicies")
            {
                MethodsConfig methodsConfig = section == "generateMethods" 
                    ? (config.defaults.generateMethods ?? (config.defaults.generateMethods = new MethodsConfig()))
                    : section == "requireKeysFor" 
                        ? (config.defaults.requireKeysFor ?? (config.defaults.requireKeysFor = new MethodsConfig()))
                        : (config.defaults.generatePolicies ?? (config.defaults.generatePolicies = new MethodsConfig()));
                
                SetMethodValue(methodsConfig, key, value.ToLowerInvariant() == "true");
            }
        }
    }
    
    // Procesar configuración de entidad
    private void ProcessEntityConfig(CodeGenConfig config, Stack<string> sections, string key, string value)
    {
        if (sections.Count >= 2)
        {
            string entityName = sections.ElementAt(1);
            
            if (!config.entities.ContainsKey(entityName))
            {
                config.entities[entityName] = new EntityConfig();
            }
            
            EntityConfig entityConfig = config.entities[entityName];
            
            if (sections.Count == 2)
            {
                // Propiedades directas de la entidad
                if (key == "dto") entityConfig.dto = value;
                else if (key == "createDto") entityConfig.createDto = value;
                else if (key == "updateDto") entityConfig.updateDto = value;
            }
            else if (sections.Count >= 3)
            {
                string subSection = sections.ElementAt(2);
                
                if (subSection == "includes")
                {
                    if (entityConfig.includes == null)
                        entityConfig.includes = new List<string>();
                    
                    if (key == "-")
                        entityConfig.includes.Add(value);
                }
                else if (subSection == "mappings")
                {
                    if (entityConfig.mappings == null)
                        entityConfig.mappings = new Dictionary<string, string>();
                    
                    entityConfig.mappings[key] = value;
                }
                else if (subSection == "generateMethods")
                {
                    if (entityConfig.generateMethods == null)
                        entityConfig.generateMethods = new MethodsConfig();
                    
                    SetMethodValue(entityConfig.generateMethods, key, value.ToLowerInvariant() == "true");
                }
                else if (subSection == "policies")
                {
                    if (entityConfig.policies == null)
                        entityConfig.policies = new Dictionary<string, string>();
                    
                    entityConfig.policies[key] = value;
                }
            }
        }
    }
    
    // Procesar configuración de contexto
    private void ProcessContextConfig(CodeGenConfig config, Stack<string> sections, string key, string value)
    {
        if (sections.Count >= 2)
        {
            string contextName = sections.ElementAt(1);
            
            if (!config.contexts.ContainsKey(contextName))
            {
                config.contexts[contextName] = new ContextConfig();
            }
            
            ContextConfig contextConfig = config.contexts[contextName];
            
            if (sections.Count == 2)
            {
                if (key == "provider") 
                    contextConfig.provider = value;
            }
            else if (sections.Count >= 3)
            {
                string subSection = sections.ElementAt(2);
                
                if (subSection == "entities")
                {
                    if (contextConfig.entities == null)
                        contextConfig.entities = new List<string>();
                    
                    if (key == "-")
                        contextConfig.entities.Add(value);
                }
            }
        }
    }
    
    // Establecer valor en MethodsConfig
    private void SetMethodValue(MethodsConfig methodsConfig, string method, bool value)
    {
        switch (method.ToLowerInvariant())
        {
            case "get":
                methodsConfig.get = value;
                break;
            case "getbyid":
                methodsConfig.getById = value;
                break;
            case "post":
                methodsConfig.post = value;
                break;
            case "put":
                methodsConfig.put = value;
                break;
            case "delete":
                methodsConfig.delete = value;
                break;
        }
    }

    // Métodos de ayuda para acceder a la configuración
    public string GetDtoName(string entityName, CodeGenConfig config)
    {
        if (config.entities != null && config.entities.TryGetValue(entityName, out var entityConfig) && !string.IsNullOrEmpty(entityConfig.dto))
        {
            return entityConfig.dto;
        }
        
        return $"{entityName}Dto";
    }

    public string GetCreateDtoName(string entityName, CodeGenConfig config)
    {
        if (config.entities != null && config.entities.TryGetValue(entityName, out var entityConfig) && !string.IsNullOrEmpty(entityConfig.createDto))
        {
            return entityConfig.createDto;
        }
        
        return $"{entityName}CreateDto";
    }

    public string GetUpdateDtoName(string entityName, CodeGenConfig config)
    {
        if (config.entities != null && config.entities.TryGetValue(entityName, out var entityConfig) && !string.IsNullOrEmpty(entityConfig.updateDto))
        {
            return entityConfig.updateDto;
        }
        
        return $"{entityName}UpdateDto";
    }
    
    public List<string> GetIncludes(string entityName, CodeGenConfig config)
    {
        if (config.entities != null && config.entities.TryGetValue(entityName, out var entityConfig) && entityConfig.includes != null)
        {
            return entityConfig.includes;
        }
        
        return new List<string>();
    }
    
    public Dictionary<string, string> GetMappings(string entityName, CodeGenConfig config)
    {
        if (config.entities != null && config.entities.TryGetValue(entityName, out var entityConfig) && entityConfig.mappings != null)
        {
            return entityConfig.mappings;
        }
        
        return new Dictionary<string, string>();
    }
    
    public bool ShouldGenerateMethod(string entityName, string methodName, CodeGenConfig config)
    {
        // Verificar configuración específica de entidad
        if (config.entities != null && config.entities.TryGetValue(entityName, out var entityConfig) && 
            entityConfig.generateMethods != null)
        {
            return GetMethodValue(entityConfig.generateMethods, methodName);
        }
        
        // Verificar configuración por defecto
        if (config.defaults?.generateMethods != null)
        {
            return GetMethodValue(config.defaults.generateMethods, methodName);
        }
        
        // Valor predeterminado si no hay configuración
        return true;
    }
    
    public bool RequiresKeyForMethod(string entityName, string methodName, CodeGenConfig config)
    {
        // Verificar configuración por defecto
        if (config.defaults?.requireKeysFor != null)
        {
            return GetMethodValue(config.defaults.requireKeysFor, methodName);
        }
        
        // Valores predeterminados por método si no hay configuración
        switch (methodName.ToLower())
        {
            case "getbyid":
            case "put":
            case "post":
            case "delete":
                return true;
            default:
                return false;
        }
    }
    
    public string GetPolicy(string entityName, string methodName, CodeGenConfig config)
    {
        if (config.entities != null && config.entities.TryGetValue(entityName, out var entityConfig) &&
            entityConfig.policies != null && entityConfig.policies.TryGetValue(methodName.ToLower(), out var policy))
        {
            return policy;
        }
        
        // Si debe generar políticas según la configuración por defecto y no hay una política específica
        if (config.defaults?.generatePolicies != null && 
            GetMethodValue(config.defaults.generatePolicies, methodName))
        {
            return $"{char.ToUpper(methodName[0])}{methodName.Substring(1)}{entityName}";
        }
        
        return string.Empty;
    }
    
    // Obtener el valor de un método desde MethodsConfig
    private bool GetMethodValue(MethodsConfig methodsConfig, string methodName)
    {
        switch (methodName.ToLower())
        {
            case "get":
                return methodsConfig.get;
            case "getbyid":
                return methodsConfig.getById;
            case "post":
                return methodsConfig.post;
            case "put":
                return methodsConfig.put;
            case "delete":
                return methodsConfig.delete;
            default:
                return false;
        }
    }
#>