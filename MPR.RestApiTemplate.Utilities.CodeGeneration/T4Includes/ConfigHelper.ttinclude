<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\Newtonsoft.Json.13.0.1\lib\net45\Newtonsoft.Json.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Serialization" #>

<#+
    #nullable enable
    
    // Clases para la configuración
    public class CodeGenConfig
    {
        [JsonProperty("defaults")]
        public DefaultsConfig? Defaults { get; set; }
        
        [JsonProperty("entities")]
        public Dictionary<string, EntityConfig>? Entities { get; set; }
        
        [JsonProperty("contexts")]
        public Dictionary<string, ContextConfig>? Contexts { get; set; }

        public CodeGenConfig()
        {
            Defaults = new DefaultsConfig();
            Entities = new Dictionary<string, EntityConfig>();
            Contexts = new Dictionary<string, ContextConfig>();
        }
    }

    public class DefaultsConfig
    {
        [JsonProperty("generateMethods")]
        public MethodsConfig? GenerateMethods { get; set; }
        
        [JsonProperty("requireKeysFor")]
        public MethodsConfig? RequireKeysFor { get; set; }
        
        [JsonProperty("generatePolicies")]
        public MethodsConfig? GeneratePolicies { get; set; }

        public DefaultsConfig()
        {
            GenerateMethods = new MethodsConfig();
            RequireKeysFor = new MethodsConfig();
            GeneratePolicies = new MethodsConfig();
        }
    }

    public class MethodsConfig
    {
        [JsonProperty("get")]
        public bool Get { get; set; } = true;
        
        [JsonProperty("getById")]
        public bool GetById { get; set; } = true;
        
        [JsonProperty("post")]
        public bool Post { get; set; } = true;
        
        [JsonProperty("put")]
        public bool Put { get; set; } = true;
        
        [JsonProperty("delete")]
        public bool Delete { get; set; } = true;
    }

    public class EntityConfig
    {
        [JsonProperty("dto")]
        public string? Dto { get; set; }
        
        [JsonProperty("createDto")]
        public string? CreateDto { get; set; }
        
        [JsonProperty("updateDto")]
        public string? UpdateDto { get; set; }
        
        [JsonProperty("includes")]
        public List<string>? Includes { get; set; }
        
        [JsonProperty("mappings")]
        public Dictionary<string, string>? Mappings { get; set; }
        
        [JsonProperty("generateMethods")]
        public MethodsConfig? GenerateMethods { get; set; }
        
        [JsonProperty("policies")]
        public Dictionary<string, string>? Policies { get; set; }

        public EntityConfig()
        {
            Includes = new List<string>();
            Mappings = new Dictionary<string, string>();
            GenerateMethods = new MethodsConfig();
            Policies = new Dictionary<string, string>();
        }
    }

    public class ContextConfig
    {
        [JsonProperty("provider")]
        public string? Provider { get; set; }
        
        [JsonProperty("entities")]
        public List<string>? Entities { get; set; }

        public ContextConfig()
        {
            Entities = new List<string>();
        }
    }

    // Función de depuración para mostrar el contenido de la configuración
    public void DebugConfig(CodeGenConfig config)
    {
        if (config == null)
        {
            System.Diagnostics.Debug.WriteLine("Config is null");
            return;
        }
        
        System.Diagnostics.Debug.WriteLine("Config loaded:");
        if (config.Entities != null)
        {
            System.Diagnostics.Debug.WriteLine($"Entities count: {config.Entities.Count}");
            foreach (var entity in config.Entities)
            {
                System.Diagnostics.Debug.WriteLine($"Entity: {entity.Key}");
                System.Diagnostics.Debug.WriteLine($"  DTO: {entity.Value.Dto}");
                System.Diagnostics.Debug.WriteLine($"  CreateDTO: {entity.Value.CreateDto}");
                System.Diagnostics.Debug.WriteLine($"  UpdateDTO: {entity.Value.UpdateDto}");
            }
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No entities found in config");
        }
    }

    // Alternativa: Función para cargar el JSON manualmente sin usar bibliotecas de serialización
    public CodeGenConfig LoadConfigManually(string hostTemplateFile)
    {
        var config = new CodeGenConfig();
        
        // Buscar el archivo JSON
        string jsonPath = Path.Combine(Path.GetDirectoryName(hostTemplateFile), "mpr.codegen.json");
        
        // Verificar si el archivo existe
        if (!File.Exists(jsonPath))
        {
            System.Diagnostics.Debug.WriteLine($"JSON config file not found at: {jsonPath}");
            return config;
        }

        try
        {
            // Leer el contenido del archivo JSON
            string jsonContent = File.ReadAllText(jsonPath);
            System.Diagnostics.Debug.WriteLine($"JSON content loaded: {jsonContent.Substring(0, Math.Min(100, jsonContent.Length))}...");
            
            // Obtener manualmente la configuración para AlphabeticalListOfProducts
            if (jsonContent.Contains("\"AlphabeticalListOfProducts\""))
            {
                if (config.Entities == null)
                    config.Entities = new Dictionary<string, EntityConfig>();
                
                var entityConfig = new EntityConfig();
                
                // Extraer valores usando índices
                int dtoIndex = jsonContent.IndexOf("\"dto\":", jsonContent.IndexOf("\"AlphabeticalListOfProducts\""));
                if (dtoIndex > 0)
                {
                    int startQuote = jsonContent.IndexOf("\"", dtoIndex + 6);
                    int endQuote = jsonContent.IndexOf("\"", startQuote + 1);
                    entityConfig.Dto = jsonContent.Substring(startQuote + 1, endQuote - startQuote - 1);
                }
                
                int createDtoIndex = jsonContent.IndexOf("\"createDto\":", jsonContent.IndexOf("\"AlphabeticalListOfProducts\""));
                if (createDtoIndex > 0)
                {
                    int startQuote = jsonContent.IndexOf("\"", createDtoIndex + 12);
                    int endQuote = jsonContent.IndexOf("\"", startQuote + 1);
                    entityConfig.CreateDto = jsonContent.Substring(startQuote + 1, endQuote - startQuote - 1);
                }
                
                int updateDtoIndex = jsonContent.IndexOf("\"updateDto\":", jsonContent.IndexOf("\"AlphabeticalListOfProducts\""));
                if (updateDtoIndex > 0)
                {
                    int startQuote = jsonContent.IndexOf("\"", updateDtoIndex + 12);
                    int endQuote = jsonContent.IndexOf("\"", startQuote + 1);
                    entityConfig.UpdateDto = jsonContent.Substring(startQuote + 1, endQuote - startQuote - 1);
                }
                
                config.Entities["AlphabeticalListOfProducts"] = entityConfig;
            }
            
            DebugConfig(config);
            return config;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading JSON config manually: {ex.Message}");
            return config;
        }
    }
    
    // Cargar la configuración desde JSON con Newtonsoft.Json
    public CodeGenConfig LoadConfig(string hostTemplateFile)
    {
        // Buscar el archivo JSON
        string jsonPath = Path.Combine(Path.GetDirectoryName(hostTemplateFile), "mpr.codegen.json");
        
        // Verificar si el archivo existe
        if (!File.Exists(jsonPath))
        {
            System.Diagnostics.Debug.WriteLine($"JSON config file not found at: {jsonPath}");
            return new CodeGenConfig();
        }

        try
        {
            // Leer el contenido del archivo JSON
            string jsonContent = File.ReadAllText(jsonPath);
            System.Diagnostics.Debug.WriteLine($"JSON content loaded: {jsonContent.Substring(0, Math.Min(100, jsonContent.Length))}...");
            
            // Limpiar cualquier BOM o carácter invisible al inicio
            if (jsonContent.StartsWith("\uFEFF"))
                jsonContent = jsonContent.Substring(1);
            
            if (!jsonContent.Trim().StartsWith("{"))
            {
                System.Diagnostics.Debug.WriteLine("JSON content does not start with an opening brace '{'");
                // Intentar con el parser manual como fallback
                return LoadConfigManually(hostTemplateFile);
            }
            
            // Deserializar el JSON a la configuración con Newtonsoft.Json
            var settings = new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver(),
                NullValueHandling = NullValueHandling.Ignore
            };
            
            var config = JsonConvert.DeserializeObject<CodeGenConfig>(jsonContent, settings);
            
            if (config == null)
            {
                System.Diagnostics.Debug.WriteLine("Deserialization returned null config, trying manual parsing");
                return LoadConfigManually(hostTemplateFile);
            }
            
            // Mostrar información de depuración
            DebugConfig(config);
            
            return config;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading JSON config with Newtonsoft: {ex.Message}");
            // Intentar con el parser manual como fallback
            return LoadConfigManually(hostTemplateFile);
        }
    }

    // Métodos de ayuda para acceder a la configuración
    public string GetDtoName(string entityName, CodeGenConfig config)
    {
        System.Diagnostics.Debug.WriteLine($"GetDtoName called for entity: {entityName}");
        
        if (config != null && config.Entities != null && config.Entities.TryGetValue(entityName, out var entityConfig) && !string.IsNullOrEmpty(entityConfig.Dto))
        {
            System.Diagnostics.Debug.WriteLine($"Found custom DTO name: {entityConfig.Dto} for entity: {entityName}");
            return entityConfig.Dto;
        }
        
        System.Diagnostics.Debug.WriteLine($"Using default DTO name: {entityName}Dto for entity: {entityName}");
        return $"{entityName}Dto";
    }

    public string GetCreateDtoName(string entityName, CodeGenConfig config)
    {
        if (config != null && config.Entities != null && config.Entities.TryGetValue(entityName, out var entityConfig) && !string.IsNullOrEmpty(entityConfig.CreateDto))
        {
            return entityConfig.CreateDto;
        }
        
        return $"{entityName}CreateDto";
    }

    public string GetUpdateDtoName(string entityName, CodeGenConfig config)
    {
        if (config != null && config.Entities != null && config.Entities.TryGetValue(entityName, out var entityConfig) && !string.IsNullOrEmpty(entityConfig.UpdateDto))
        {
            return entityConfig.UpdateDto;
        }
        
        return $"{entityName}UpdateDto";
    }
    
    public List<string> GetIncludes(string entityName, CodeGenConfig config)
    {
        if (config != null && config.Entities != null && config.Entities.TryGetValue(entityName, out var entityConfig) && entityConfig.Includes != null)
        {
            return entityConfig.Includes;
        }
        
        return new List<string>();
    }
    
    public Dictionary<string, string> GetMappings(string entityName, CodeGenConfig config)
    {
        if (config != null && config.Entities != null && config.Entities.TryGetValue(entityName, out var entityConfig) && entityConfig.Mappings != null)
        {
            return entityConfig.Mappings;
        }
        
        return new Dictionary<string, string>();
    }
    
    public bool ShouldGenerateMethod(string entityName, string methodName, CodeGenConfig config)
    {
        // Verificar configuración específica de entidad
        if (config != null && config.Entities != null && config.Entities.TryGetValue(entityName, out var entityConfig) && 
            entityConfig.GenerateMethods != null)
        {
            return GetMethodValue(entityConfig.GenerateMethods, methodName);
        }
        
        // Verificar configuración por defecto
        if (config != null && config.Defaults?.GenerateMethods != null)
        {
            return GetMethodValue(config.Defaults.GenerateMethods, methodName);
        }
        
        // Valor predeterminado si no hay configuración
        return true;
    }
    
    public bool RequiresKeyForMethod(string entityName, string methodName, CodeGenConfig config)
    {
        // Verificar configuración por defecto
        if (config != null && config.Defaults?.RequireKeysFor != null)
        {
            return GetMethodValue(config.Defaults.RequireKeysFor, methodName);
        }
        
        // Valores predeterminados por método si no hay configuración
        switch (methodName.ToLower())
        {
            case "getbyid":
            case "put":
            case "post":
            case "delete":
                return true;
            default:
                return false;
        }
    }
    
    public string GetPolicy(string entityName, string methodName, CodeGenConfig config)
    {
        if (config != null && config.Entities != null && config.Entities.TryGetValue(entityName, out var entityConfig) &&
            entityConfig.Policies != null && entityConfig.Policies.TryGetValue(methodName.ToLower(), out var policy))
        {
            return policy;
        }
        
        // Si debe generar políticas según la configuración por defecto y no hay una política específica
        if (config != null && config.Defaults?.GeneratePolicies != null && 
            GetMethodValue(config.Defaults.GeneratePolicies, methodName))
        {
            return $"{char.ToUpper(methodName[0])}{methodName.Substring(1)}{entityName}";
        }
        
        return string.Empty;
    }
    
    // Obtener el valor de un método desde MethodsConfig
    private bool GetMethodValue(MethodsConfig methodsConfig, string methodName)
    {
        switch (methodName.ToLower())
        {
            case "get":
                return methodsConfig.Get;
            case "getbyid":
                return methodsConfig.GetById;
            case "post":
                return methodsConfig.Post;
            case "put":
                return methodsConfig.Put;
            case "delete":
                return methodsConfig.Delete;
            default:
                return false;
        }
    }
#>