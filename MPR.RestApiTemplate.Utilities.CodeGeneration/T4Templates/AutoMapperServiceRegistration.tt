<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

<#
    // Directorio donde se encuentran las clases de mapeo generadas
    string mappingsDir = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Application\Mappings\GeneratedMappings");

    if (!Directory.Exists(mappingsDir))
    {
#>
// ERROR: El directorio de mappings generados no existe: <#= mappingsDir #>
<#
        return "ERROR: El directorio de mappings generados no existe";
    }

    var mappingFiles = Directory.GetFiles(mappingsDir, "*.cs");
    
    if (mappingFiles.Length == 0)
    {
#>
// ADVERTENCIA: No se encontraron archivos de mapping en el directorio
<#
    }

    var mappings = new List<string>();

    foreach (var file in mappingFiles)
    {
        var lines = File.ReadAllLines(file);
        foreach (var line in lines)
        {
            var match = Regex.Match(line.Trim(), @"public\s+(?:partial\s+)?class\s+(\w+Mapping)\s*:\s*Profile");
            if (match.Success)
            {
                mappings.Add(match.Groups[1].Value);
                break; // Asumimos que solo hay una clase de mapping por archivo
            }
        }
    }

    // También buscar en el archivo MappingProfiles.generated.cs por compatibilidad
    string oldMappingsFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Application\Mappings\MappingProfiles.generated.cs");
    if (File.Exists(oldMappingsFile))
    {
        var lines = File.ReadAllLines(oldMappingsFile);
        foreach (var line in lines)
        {
            var match = Regex.Match(line.Trim(), @"public\s+class\s+(\w+Mapping)\s*:\s*Profile");
            if (match.Success)
            {
                mappings.Add(match.Groups[1].Value);
            }
        }
    }

    mappings = mappings.Distinct().ToList();
#>
// Autogenerated Code - Do not modify
using AutoMapper;
using Microsoft.Extensions.DependencyInjection;
using MPR.RestApiTemplate.Application.DTOs;

namespace MPR.RestApiTemplate.Application.Mappings;

public static class AutoMapperRegistration
{
    public static IServiceCollection AddMappingProfiles(this IServiceCollection services)
    {
<#
    foreach (var map in mappings)
    {
#>
        services.AddSingleton<Profile, <#= map #>>();
<#
    }
#>
        
        services.AddAutoMapper(
<#
    for (int i = 0; i < mappings.Count; i++)
    {
        string suffix = (i < mappings.Count - 1) ? "," : "";
#>
            typeof(<#= mappings[i] #>)<#= suffix #>
<#
    }
#>
        );

        return services;
    }
}