<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System.ComponentModel.DataAnnotations;

namespace MPR.RestApiTemplate.Application.Models
{
<#
    string entitiesPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Domain\Entities");
    var entityFiles = Directory.GetFiles(entitiesPath, "*.cs");
    var entityNames = entityFiles.Select(f => Path.GetFileNameWithoutExtension(f)).ToHashSet();

    foreach (var file in entityFiles)
    {
        var className = Path.GetFileNameWithoutExtension(file);
        var lines = File.ReadAllLines(file);

        bool nextIsKey = false;
#>

    public class <#= className #>Model
    {
<#
        foreach (var line in lines)
        {
            var trimmed = line.Trim();

            if (trimmed.StartsWith("[Key]"))
            {
                nextIsKey = true;
                continue;
            }

            if (trimmed.StartsWith("public") && trimmed.Contains("{ get;") && !trimmed.Contains("class"))
            {
                // Eliminar 'virtual' si existe
                var cleanLine = trimmed.Replace("virtual", "").Trim();
                var parts = cleanLine.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                if (parts.Length >= 3)
                {
                    string rawType = parts[1];
                    string rawName = parts[2];

                    // Nullable check
                    string type = rawType;
                    if (type.EndsWith("?"))
                        type = type.TrimEnd('?') + "?";

                    string name = rawName.Split(new[] { '{', ';' }, StringSplitOptions.RemoveEmptyEntries)[0].Trim();

                    // Convertir Entity a Model si aplica
                    string modelType;

                    var match = Regex.Match(type, @"^(?<collection>\w+)<(?<inner>\w+)>$");
                    if (match.Success)
                    {
                        var collectionType = match.Groups["collection"].Value;
                        var innerType = match.Groups["inner"].Value;
                        var mappedInnerType = entityNames.Contains(innerType) ? innerType + "Model" : innerType;
                        modelType = $"{collectionType}<{mappedInnerType}>";
                    }
                    else
                    {
                        string baseType = type.TrimEnd('?');
                        modelType = entityNames.Contains(baseType)
                            ? type.Replace(baseType, baseType + "Model")
                            : type;
                    }

                    if (nextIsKey)
                    {
#>
        [Key]
<#
                        nextIsKey = false;
                    }
#>
        public <#= modelType #> <#= name #> { get; set; }
<#
                }
            }
        }
#>
    }
<#
    }
#>
}