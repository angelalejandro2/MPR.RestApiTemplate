<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MPR.RestApiTemplate.Application.DTOs
{
<#
    string entitiesPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Domain\Entities");
    var entityFiles = Directory.GetFiles(entitiesPath, "*.cs");
    var entityNames = entityFiles.Select(f => Path.GetFileNameWithoutExtension(f)).ToHashSet();

    foreach (var file in entityFiles)
    {
        var className = Path.GetFileNameWithoutExtension(file);
        var lines = File.ReadAllLines(file);

        var properties = new List<(string Type, string Name, bool IsKey, string? DbGenerated, bool IsEntityReference)>();

        bool nextIsKey = false;
        string? nextDatabaseGenerated = null;
#>

    public class <#= className #>Dto
    {
<#
        foreach (var line in lines)
        {
            var trimmed = line.Trim();

            if (trimmed.StartsWith("[Key]"))
            {
                nextIsKey = true;
                continue;
            }

            if (trimmed.StartsWith("[DatabaseGenerated"))
            {
                nextDatabaseGenerated = trimmed;
                continue;
            }

            if (trimmed.StartsWith("public") && trimmed.Contains("{ get;") && !trimmed.Contains("class"))
            {
                var cleanLine = trimmed.Replace("virtual", "").Trim();
                var parts = cleanLine.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                if (parts.Length >= 3)
                {
                    string rawType = parts[1];
                    string rawName = parts[2].Split(new[] { '{', ';' }, StringSplitOptions.RemoveEmptyEntries)[0].Trim();

                    string type = rawType.EndsWith("?") ? rawType : rawType;

                    string modelType;
                    string baseType = type.TrimEnd('?');
                    bool isEntityReference = false;

                    var match = Regex.Match(type, @"^(?<collection>\w+)<(?<inner>\w+)>$");
                    if (match.Success)
                    {
                        var collectionType = match.Groups["collection"].Value;
                        var innerType = match.Groups["inner"].Value;
                        isEntityReference = entityNames.Contains(innerType);
                        var mappedInnerType = isEntityReference ? innerType + "Dto" : innerType;
                        modelType = $"{collectionType}<{mappedInnerType}>";
                    }
                    else
                    {
                        isEntityReference = entityNames.Contains(baseType);
                        modelType = isEntityReference ? baseType + "Dto" : type;
                    }

                    bool isKey = nextIsKey;
                    string? dbGenerated = nextDatabaseGenerated;

                    properties.Add((modelType, rawName, isKey, dbGenerated, isEntityReference));

                    nextIsKey = false;
                    nextDatabaseGenerated = null;
                }
            }
        }

        foreach (var prop in properties)
        {
            if (prop.IsKey)
            {
#>
        [Key]
<#
            }
            if (!string.IsNullOrEmpty(prop.DbGenerated))
            {
#>
        <#= prop.DbGenerated #>
<#
            }
#>
        public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
        }
#>
    }

<#
    if (properties.Any(p => p.IsKey))
    {
#>

    public class <#= className #>CreateDto
    {
<#
        foreach (var prop in properties.Where(p =>
            !p.IsKey &&
            string.IsNullOrEmpty(p.DbGenerated) &&
            !p.IsEntityReference))
        {
#>
        public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
        }
#>
    }

    public class <#= className #>UpdateDto
    {
<#
        foreach (var prop in properties.Where(p =>
            !p.IsKey &&
            string.IsNullOrEmpty(p.DbGenerated) &&
            !p.IsEntityReference))
        {
#>
        public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
        }
#>
    }
<#
    }
#>

<#
    } // fin foreach entidad
#>
}