<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".generated.cs" #>
<#
// Función para generar el contenido de la implementación del repositorio
string GenerateRepositoryImplementation(string entityName, string dbContextName, string dbContextNameLowered)
{
	StringBuilder sb = new StringBuilder();
	sb.AppendLine("// Autogenerated Code - Do not implement custom logic here.");
    sb.AppendLine("// Implement custom logic in partial class");
    sb.AppendLine("");
    sb.AppendLine("using MPR.RestApiTemplate.Domain.Entities;");
    sb.AppendLine("using MPR.RestApiTemplate.Domain.Interfaces.Repositories;");
    sb.AppendLine("using MPR.RestApiTemplate.Infrastructure.Context;");
    sb.AppendLine("");
    sb.AppendLine("namespace MPR.RestApiTemplate.Infrastructure.Repositories");
    sb.AppendLine("{");
    sb.AppendLine($"    public partial class {entityName}Repository({dbContextName} {dbContextNameLowered}) : GenericRepository<{entityName}>({dbContextNameLowered}), I{entityName}Repository");
    sb.AppendLine("    {");
    sb.AppendLine("    }");
    sb.AppendLine("}");
    
    return sb.ToString();
}

// Función para generar el contenido de la implementación del repositorio
string GenerateRepositorySpImplementation(string dbContextName)
{
	StringBuilder sb = new StringBuilder();
	sb.AppendLine("// Autogenerated Code - Do not implement custom logic here.");
    sb.AppendLine("// Implement custom logic in partial class");
    sb.AppendLine("");
    sb.AppendLine("using Microsoft.EntityFrameworkCore;");
    sb.AppendLine("using MPR.RestApiTemplate.Domain.Interfaces.Repositories;");
    sb.AppendLine("");
    sb.AppendLine("namespace MPR.RestApiTemplate.Infrastructure.Repositories");
    sb.AppendLine("{");
    sb.AppendLine($"    public partial class {dbContextName}SpRepository(DbContext dbContext) : StoredProcedureRepository(dbContext), I{dbContextName}SpRepository");
    sb.AppendLine("    {");
    sb.AppendLine("    }");
    sb.AppendLine("}");
    
    return sb.ToString();
}

// Directorio donde se encuentran los contextos de base de datos
var dbContextPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Infrastructure\Context");

// Directorio donde se guardarán las implementaciones de repositorios generadas
string outputPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Infrastructure\Repositories\Generated");

// Crear el directorio de salida si no existe
if (!Directory.Exists(outputPath))
{
    Directory.CreateDirectory(outputPath);
}

// Obtener todos los archivos de contexto de base de datos
var dbContexts = Directory.GetFiles(dbContextPath, "*.cs");

// Para cada contexto de base de datos
foreach (var dbContext in dbContexts)
{
    var dbContextName = Path.GetFileNameWithoutExtension(dbContext);
    var dbContextNameLowered = char.ToLower(dbContextName[0]) + dbContextName.Substring(1);
    var dbContextCode = File.ReadAllText(dbContext);
    
     // Generar el contenido de la implementación del repositorio
    string repositoryContentSp = GenerateRepositorySpImplementation(dbContextName);
        
    // Nombre del archivo de salida
    string outputFileNameSp = $"{dbContextName}SpRepository.cs";
    string outputFilePathSp = Path.Combine(outputPath, outputFileNameSp);
        
    // Verificar si el archivo ya existe antes de escribirlo
    if (!File.Exists(outputFilePathSp))
    {
        File.WriteAllText(outputFilePathSp, repositoryContentSp);
    }
    else
    {
        // Se podría agregar alguna indicación de que el archivo no se sobrescribió
    }

    // Encontrar todas las entidades definidas como DbSet en el contexto
    var matches = Regex.Matches(dbContextCode, @"DbSet<(?<entity>\w+)>");
    var entityNames = matches.Cast<Match>().Select(m => m.Groups["entity"].Value).Distinct().ToList();
    
    // Para cada entidad encontrada en el contexto
    foreach (var entityName in entityNames)
    {
        // Generar el contenido de la implementación del repositorio
        string repositoryContent = GenerateRepositoryImplementation(entityName, dbContextName, dbContextNameLowered);
        
        // Nombre del archivo de salida
        string outputFileName = $"{entityName}Repository.cs";
        string outputFilePath = Path.Combine(outputPath, outputFileName);
        
        // Verificar si el archivo ya existe antes de escribirlo
        //if (!File.Exists(outputFilePath))
        //{
            File.WriteAllText(outputFilePath, repositoryContent);
        //}
        //else
        //{
            // Se podría agregar alguna indicación de que el archivo no se sobrescribió
        //}
    }
}
#>
// Esta plantilla ha generado implementaciones de repositorio individuales para cada entidad.
// Los archivos generados se encuentran en la carpeta GeneratedRepositoryImplementations.
// Nota: Los archivos existentes no han sido sobrescritos.