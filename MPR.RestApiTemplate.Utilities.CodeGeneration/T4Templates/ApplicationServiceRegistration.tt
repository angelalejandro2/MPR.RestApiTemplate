<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>

<#
    // Directorio donde se encuentran los servicios generados
    string servicesDir = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Application\Services\GeneratedServices");

    // Inicializar lista para almacenar nombres de servicios
    var serviceNames = new List<string>();

    // Verificar si el directorio existe
    if (!Directory.Exists(servicesDir))
    {
#>
// ADVERTENCIA: El directorio de servicios generados no existe: <#= servicesDir #>
<#
    }
    else
    {
        // Obtener todos los archivos .cs en la carpeta GeneratedServices
        var serviceFiles = Directory.GetFiles(servicesDir, "*.cs");
        
        if (serviceFiles.Length == 0)
        {
#>
// ADVERTENCIA: No se encontraron archivos de servicio en el directorio GeneratedServices
<#
        }

        // Procesar cada archivo de servicio
        foreach (var file in serviceFiles)
        {
            var lines = File.ReadAllLines(file);
            foreach (var line in lines)
            {
                // Detecta clases públicas con sufijo Service, incluyendo parciales
                var match = Regex.Match(line.Trim(), @"public\s+(?:partial\s+)?class\s+(\w+Service)\b");
                if (match.Success)
                {
                    serviceNames.Add(match.Groups[1].Value);
                    break; // Asumimos que solo hay un servicio por archivo
                }
            }
        }
    }

    // También buscar en el archivo Services.generated.cs por compatibilidad
    string oldGeneratedFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Application\Services\Services.generated.cs");
    if (File.Exists(oldGeneratedFile))
    {
        var serviceLines = File.ReadAllLines(oldGeneratedFile);
        foreach (var line in serviceLines)
        {
            // Detecta clases públicas con sufijo Service, incluyendo parciales
            var match = Regex.Match(line.Trim(), @"public\s+(?:partial\s+)?class\s+(\w+Service)\b");
            if (match.Success)
            {
                serviceNames.Add(match.Groups[1].Value);
            }
        }
    }

    // Eliminar duplicados
    serviceNames = serviceNames.Distinct().ToList();
#>
// Autogenerated Code - Do not modify
using Microsoft.Extensions.DependencyInjection;

namespace MPR.RestApiTemplate.Application.Services;

public static class ApplicationServiceRegistration
{
    public static IServiceCollection AddApplicationServices(this IServiceCollection services)
    {
<#
    if (serviceNames.Count == 0)
    {
#>
        // No se encontraron servicios para registrar
<#
    }
    else
    {
        foreach (var svc in serviceNames)
        {
#>
        services.AddScoped<<#= svc #>>();
<#
        }
    }
#>
        return services;
    }
}