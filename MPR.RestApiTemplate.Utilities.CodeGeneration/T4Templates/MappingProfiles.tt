<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\T4Includes\MprCodegenParser.ttinclude" #>
<#@ output extension=".generated.cs" #>
<#
   // Crear una instancia del MprCodegenParser para leer la configuración
    var parser = new MprCodegenParser(Host.TemplateFile, @"..\mpr.codegen.json");
    
    // Función para obtener el nombre personalizado de la entidad desde mpr.codegen.json
    string GetCustomEntityName(string entityName, MprCodegenParser parser)
    {
        try
        {
            // Obtenemos los nombres de DTO para aprovechar la lógica que ya existe en el parser
            var (dtoName, _, _) = parser.GetDtoNames(entityName);
            
            // Extraer el nombre base de la entidad del nombre del DTO (quitando "Dto" del final)
            string customName = dtoName.EndsWith("Dto") ? dtoName.Substring(0, dtoName.Length - 3) : dtoName;
            
            return string.IsNullOrEmpty(customName) ? entityName : customName;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error al obtener nombre personalizado: {ex.Message}");
            return entityName;
        }
    }
    
    // Función para generar el contenido de la clase de mapeo
    string GenerateMappingClass(string entityName, bool hasKey, MprCodegenParser parser)
    {
        // Obtener el nombre personalizado de la entidad desde la configuración
        string customEntityName = GetCustomEntityName(entityName, parser);
        
        // Obtener los nombres de DTO configurados o por defecto
        var (dtoName, createDtoName, updateDtoName) = parser.GetDtoNames(entityName);
        
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// Autogenerated Code - Do not modify");
        sb.AppendLine("using AutoMapper;");
        sb.AppendLine("using MPR.RestApiTemplate.Application.DTOs;");
        sb.AppendLine("using MPR.RestApiTemplate.Domain.Entities;");
        sb.AppendLine("");
        sb.AppendLine("namespace MPR.RestApiTemplate.Application.DTOs");
        sb.AppendLine("{");
        sb.AppendLine($"    public partial class {customEntityName}Mapping : Profile");
        sb.AppendLine("    {");
        sb.AppendLine($"        public {customEntityName}Mapping()");
        sb.AppendLine("        {");
        sb.AppendLine("            ConfigureMappings();");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        protected virtual void ConfigureMappings()");
        sb.AppendLine("        {");
        sb.AppendLine($"            CreateMap<{entityName}, {dtoName}>().ReverseMap();");
        
        if (hasKey)
        {
            sb.AppendLine($"            CreateMap<{entityName}, {createDtoName}>().ReverseMap();");
            sb.AppendLine($"            CreateMap<{entityName}, {updateDtoName}>().ReverseMap();");
        }
        
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
    
    // Directorio donde se encuentran las entidades
    var entitiesPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Domain\Entities");
    
    // Directorio donde se guardarán las clases de mapeo generadas
    string outputPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Application\Mappings\Generated");
    
    // Crear el directorio de salida si no existe
    if (!Directory.Exists(outputPath))
    {
        Directory.CreateDirectory(outputPath);
    }
    
    var files = Directory.GetFiles(entitiesPath, "*.cs");
    
    foreach (var file in files)
    {
        var entityName = Path.GetFileNameWithoutExtension(file);
        var lines = File.ReadAllLines(file);
        
        // Detectar si tiene al menos una [Key]
        bool hasKey = false;
        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("[Key]"))
            {
                hasKey = true;
                break;
            }
        }
        
        // Obtener el nombre personalizado para el archivo de salida
        string customEntityName = GetCustomEntityName(entityName, parser);
        
        // Generar el contenido de la clase de mapeo
        string mappingContent = GenerateMappingClass(entityName, hasKey, parser);
        
        // Nombre del archivo de salida con el nombre personalizado
        string outputFileName = $"{customEntityName}Mapping.cs";
        string outputFilePath = Path.Combine(outputPath, outputFileName);
        
        // Escribir el archivo
        File.WriteAllText(outputFilePath, mappingContent);
    }
#>
// Esta plantilla ha generado clases de mapeo individuales para cada entidad.
// Los archivos generados se encuentran en la carpeta GeneratedMappings.
// Los nombres de DTOs personalizados se configuran en mpr.codegen.json