<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // Función para generar el contenido de la clase de mapeo
    string GenerateMappingClass(string entityName, bool hasKey)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// Autogenerated Code - Do not modify");
        sb.AppendLine("using AutoMapper;");
        sb.AppendLine("using MPR.RestApiTemplate.Application.DTOs;");
        sb.AppendLine("using MPR.RestApiTemplate.Domain.Entities;");
        sb.AppendLine("");
        sb.AppendLine("namespace MPR.RestApiTemplate.Application.DTOs");
        sb.AppendLine("{");
        sb.AppendLine($"    public partial class {entityName}Mapping : Profile");
        sb.AppendLine("    {");
        sb.AppendLine("        public " + entityName + "Mapping()");
        sb.AppendLine("        {");
        sb.AppendLine("            ConfigureMappings();");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        protected virtual void ConfigureMappings()");
        sb.AppendLine("        {");
        sb.AppendLine($"            CreateMap<{entityName}, {entityName}Dto>().ReverseMap();");
        
        if (hasKey)
        {
            sb.AppendLine($"            CreateMap<{entityName}, {entityName}CreateDto>().ReverseMap();");
            sb.AppendLine($"            CreateMap<{entityName}, {entityName}UpdateDto>().ReverseMap();");
        }
        
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
    
    // Directorio donde se encuentran las entidades
    var entitiesPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Domain\Entities");
    
    // Directorio donde se guardarán las clases de mapeo generadas
    string outputPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Application\DTOs\GeneratedMappings");
    
    // Crear el directorio de salida si no existe
    if (!Directory.Exists(outputPath))
    {
        Directory.CreateDirectory(outputPath);
    }
    
    var files = Directory.GetFiles(entitiesPath, "*.cs");
    
    foreach (var file in files)
    {
        var entityName = Path.GetFileNameWithoutExtension(file);
        var lines = File.ReadAllLines(file);
        
        // Detectar si tiene al menos una [Key]
        bool hasKey = false;
        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("[Key]"))
            {
                hasKey = true;
                break;
            }
        }
        
        // Generar el contenido de la clase de mapeo
        string mappingContent = GenerateMappingClass(entityName, hasKey);
        
        // Nombre del archivo de salida
        string outputFileName = $"{entityName}Mapping.generated.cs";
        string outputFilePath = Path.Combine(outputPath, outputFileName);
        
        // Verificar si el archivo ya existe antes de escribirlo
        if (!File.Exists(outputFilePath))
        {
            File.WriteAllText(outputFilePath, mappingContent);
        }
    }
#>
// Esta plantilla ha generado clases de mapeo individuales para cada entidad.
// Los archivos generados se encuentran en la carpeta GeneratedMappings.
// Nota: Los archivos existentes no han sido sobrescritos.