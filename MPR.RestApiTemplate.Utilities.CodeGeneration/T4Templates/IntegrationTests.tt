<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#+
public class PropertyDef
{
    public string Type { get; set; }
    public string Name { get; set; }
    public bool IsKey { get; set; }
}

string GetDefaultValue(string type, string version)
{
    type = type.TrimEnd('?');
    return type switch
    {
        "string" => $"\"Test{version}\"",
        "int" => version,
        "long" => $"{version}L",
        "bool" => version == "1" ? "true" : "false",
        "DateTime" => "DateTime.UtcNow",
        "Guid" => "Guid.NewGuid()",
        _ => $"/* TODO: set value for {type} */ default"
    };
}

string GetCompositeKeyRoute(IEnumerable<PropertyDef> keys, string instanceName)
{
    return string.Join("/", keys.Select(k => $"{{{instanceName}.{k.Name}}}"));
}

string GetCompositeKeyUrl(IEnumerable<PropertyDef> keys, string instanceName)
{
    return string.Join(" + \"/\" + ", keys.Select(k => $"{instanceName}.{k.Name}"));
}
#>

<#
var entityPath = Path.Combine(Host.ResolvePath("."), @"..\..\MPR.RestApiTemplate.Domain\Entities");
var modelsFile = Path.Combine(Host.ResolvePath("."), @"..\..\MPR.RestApiTemplate.Application\Models\Models.generated.cs");

var dtoTypes = new Dictionary<string, List<PropertyDef>>();

// Parse all models from the single generated file
if (File.Exists(modelsFile))
{
    var lines = File.ReadAllLines(modelsFile);
    string currentModel = null;
    var currentProps = new List<PropertyDef>();
    bool inModel = false;

    for (int i = 0; i < lines.Length; i++)
    {
        var line = lines[i].Trim();

        if (line.StartsWith("public class ") && line.Contains("Model"))
        {
            if (currentModel != null)
                dtoTypes[currentModel] = currentProps;

            currentModel = Regex.Match(line, @"public class (\w+)").Groups[1].Value;
            currentProps = new List<PropertyDef>();
            inModel = true;
            continue;
        }

        if (inModel && line.StartsWith("}"))
        {
            if (currentModel != null)
                dtoTypes[currentModel] = currentProps;

            currentModel = null;
            currentProps = new List<PropertyDef>();
            inModel = false;
            continue;
        }

        if (inModel && line.StartsWith("public "))
        {
            var match = Regex.Match(line, @"public\s+([\w\?\<\>]+)\s+(\w+)\s*\{");
            if (match.Success)
            {
                string type = match.Groups[1].Value;
                string name = match.Groups[2].Value;

                bool isKey = false;
                for (int j = i - 1; j >= 0; j--)
                {
                    var previousLine = lines[j].Trim();
                    if (previousLine.StartsWith("[Key]"))
                    {
                        isKey = true;
                        break;
                    }
                    if (!previousLine.StartsWith("["))
                        break;
                }

                currentProps.Add(new PropertyDef
                {
                    Type = type,
                    Name = name,
                    IsKey = isKey || name == "Id"
                });
            }
        }
    }
}

// Procesar entidades
foreach (var file in Directory.GetFiles(entityPath, "*.cs"))
{
    var entityName = Path.GetFileNameWithoutExtension(file);
    var modelName = entityName + "Model";
    var route = entityName.ToLower() + "s";
    if (!dtoTypes.ContainsKey(modelName)) continue;

    var props = dtoTypes[modelName];
    var keys = props.Where(p => p.IsKey).ToList();
    if (keys.Count == 0) continue;

    var routeTemplate = GetCompositeKeyRoute(keys, "created");
    var urlTemplate = GetCompositeKeyUrl(keys, "created");
#>
using System.Net;
using System.Net.Http.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Testing;
using Xunit;
using MPR.RestApiTemplate.Api;
using MPR.RestApiTemplate.Application.Models;
using System;

namespace MPR.RestApiTemplate.IntegrationTests
{
    public class <#= entityName #>IntegrationTests : IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public <#= entityName #>IntegrationTests(WebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient();
        }

        [Fact]
        public async Task Full_Crud_For_<#= entityName #>()
        {
            // CREATE
            var createDto = new <#= modelName #>
            {
<#
    foreach (var prop in props.Where(p => !p.IsKey))
    {
#>                <#= prop.Name #> = <#= GetDefaultValue(prop.Type, "1") #>,
<#
    }
#>            };

            var postResponse = await _client.PostAsJsonAsync("/api/<#= route #>", createDto);
            postResponse.EnsureSuccessStatusCode();

            var created = await postResponse.Content.ReadFromJsonAsync<<#= modelName #>>();

            // READ
            var getResponse = await _client.GetAsync($"/api/<#= route #>/<#= routeTemplate #>");
            getResponse.EnsureSuccessStatusCode();
            var retrieved = await getResponse.Content.ReadFromJsonAsync<<#= modelName #>>();
<#
    foreach (var key in keys)
    {
#>            Assert.Equal(created.<#= key.Name #>, retrieved!.<#= key.Name #>);
<#
    }
#>

            // UPDATE
            var updateDto = new <#= modelName #>
            {
<#
    foreach (var key in keys)
    {
#>                <#= key.Name #> = created.<#= key.Name #>,
<#
    }
    foreach (var prop in props.Where(p => !p.IsKey))
    {
#>                <#= prop.Name #> = <#= GetDefaultValue(prop.Type, "2") #>,
<#
    }
#>            };

            var putResponse = await _client.PutAsJsonAsync($"/api/<#= route #>/"+<#= urlTemplate #>, updateDto);
            putResponse.EnsureSuccessStatusCode();

            var getAfterPut = await _client.GetAsync($"/api/<#= route #>/"+<#= urlTemplate #>);
            getAfterPut.EnsureSuccessStatusCode();
            var updated = await getAfterPut.Content.ReadFromJsonAsync<<#= modelName #>>();
<#
    foreach (var key in keys)
    {
#>            Assert.Equal(created.<#= key.Name #>, updated!.<#= key.Name #>);
<#
    }
#>

            // DELETE
            var deleteResponse = await _client.DeleteAsync($"/api/<#= route #>/"+<#= urlTemplate #>);
            deleteResponse.EnsureSuccessStatusCode();

            var getAfterDelete = await _client.GetAsync($"/api/<#= route #>/"+<#= urlTemplate #>);
            Assert.Equal(HttpStatusCode.NotFound, getAfterDelete.StatusCode);
        }
    }
}
<#
}
#>