<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    // Recopilamos información de contextos
    string contextPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Infrastructure\Context");
    var contextFiles = Directory.GetFiles(contextPath, "*Context.cs");
    var contextInfo = new List<(string ClassName, string Provider)>();
    foreach (var file in contextFiles)
    {
        var lines = File.ReadAllLines(file);
        string provider = "Oracle"; // default
        string className = null;
        for (int i = 0; i < lines.Length; i++)
        {
            string line = lines[i].Trim();
            line = line.Replace("partial", "").Trim();
            var attrMatch = Regex.Match(line, @"\[DbProvider\(DbProvider\.(\w+)\)\]");
            if (attrMatch.Success)
            {
                provider = attrMatch.Groups[1].Value;
            }
            var classMatch = Regex.Match(line, @"public\s+class\s+(\w+Context)");
            if (classMatch.Success)
            {
                className = classMatch.Groups[1].Value;
                break;
            }
        }
        if (!string.IsNullOrEmpty(className))
            contextInfo.Add((className, provider));
    }
    
    // Función para generar el contenido de la clase
    string GenerateDbContextRegistrationClass(List<(string ClassName, string Provider)> contextInfo)
    {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("// Autogenerated Code - Do not modify");
        sb.AppendLine("// Implement custom logic in a partial class");
        sb.AppendLine("");
        sb.AppendLine("using Microsoft.EntityFrameworkCore;");
        sb.AppendLine("using Microsoft.Extensions.Configuration;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("");
        sb.AppendLine("namespace MPR.RestApiTemplate.Infrastructure.Context");
        sb.AppendLine("{");
        sb.AppendLine("    public partial class DbContextRegistration");
        sb.AppendLine("    {");
        sb.AppendLine("        private readonly IServiceCollection _services;");
        sb.AppendLine("        private readonly IConfiguration _configuration;");
        sb.AppendLine("");
        sb.AppendLine("        public DbContextRegistration(IServiceCollection services, IConfiguration configuration)");
        sb.AppendLine("        {");
        sb.AppendLine("            _services = services;");
        sb.AppendLine("            _configuration = configuration;");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        public IServiceCollection RegisterDbContexts()");
        sb.AppendLine("        {");
        sb.AppendLine("            ConfigureDbContexts();");
        sb.AppendLine("            return _services;");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        protected virtual void ConfigureDbContexts()");
        sb.AppendLine("        {");
        
        // Generar el código para cada contexto
        foreach (var ctxInfo in contextInfo)
        {
            var ctx = ctxInfo.ClassName;
            var provider = ctxInfo.Provider;
            string useCall = provider switch
            {
                "SqlServer" => "UseSqlServer",
                "Oracle" => "UseOracle",
                _ => "UseOracle"
            };
            string connName = ctx.Replace("Context", "Connection");
            
            sb.AppendLine($"            _services.AddDbContext<{ctx}>(options =>");
            sb.AppendLine($"                options.{useCall}(");
            sb.AppendLine($"                    _configuration.GetConnectionString(\"{connName}\"),");
            sb.AppendLine($"                    optionsBuilder => optionsBuilder.MigrationsAssembly(typeof({ctx}).Assembly.FullName)");
            sb.AppendLine("                )");
            sb.AppendLine("            );");
        }
        
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("");
        sb.AppendLine("    public static class DbContextRegistrationExtensions");
        sb.AppendLine("    {");
        sb.AppendLine("        public static IServiceCollection AddInfrastructureDbContexts(this IServiceCollection services, IConfiguration configuration)");
        sb.AppendLine("        {");
        sb.AppendLine("            return new DbContextRegistration(services, configuration).RegisterDbContexts();");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
    
    // Directorio donde se guardará la clase generada
    string outputPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Api\Startup\Generated");
    
    // Crear el directorio de salida si no existe
    if (!Directory.Exists(outputPath))
    {
        Directory.CreateDirectory(outputPath);
    }
    
    // Generar el contenido de la clase
    string classContent = GenerateDbContextRegistrationClass(contextInfo);
    
    // Nombre del archivo de salida
    string outputFileName = "DbContextRegistration.cs";
    string outputFilePath = Path.Combine(outputPath, outputFileName);
    
    // Verificar si el archivo ya existe antes de escribirlo
    //if (!File.Exists(outputFilePath))
    //{
        File.WriteAllText(outputFilePath, classContent);
    //}
#>
// Esta plantilla ha generado la clase DbContextRegistration para registrar los contextos de base de datos.
// El archivo generado se encuentra en la carpeta Api/Startup/Generated.
// Nota: El archivo existente no ha sido sobrescrito si ya existía.