<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#
    string contextPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Infrastructure\Context");
    var contextFiles = Directory.GetFiles(contextPath, "*DbContext.cs");

    var contextInfo = new List<(string ClassName, string Provider)>();

    foreach (var file in contextFiles)
    {
        var lines = File.ReadAllLines(file);
        string provider = "Oracle"; // default
        string className = null;

        for (int i = 0; i < lines.Length; i++)
        {
            string line = lines[i].Trim();

            var attrMatch = Regex.Match(line, @"\[DbProvider\(DbProvider\.(\w+)\)\]");
            if (attrMatch.Success)
            {
                provider = attrMatch.Groups[1].Value;
            }

            var classMatch = Regex.Match(line, @"public\s+class\s+(\w+DbContext)");
            if (classMatch.Success)
            {
                className = classMatch.Groups[1].Value;
                break;
            }
        }

        if (!string.IsNullOrEmpty(className))
            contextInfo.Add((className, provider));
    }
#>
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace MPR.RestApiTemplate.Infrastructure.Context;

public static class DbContextRegistration
{
    public static IServiceCollection AddInfrastructureDbContexts(this IServiceCollection services, IConfiguration configuration)
    {
<#
    foreach (var ctxInfo in contextInfo)
    {
        var ctx = ctxInfo.ClassName;
        var provider = ctxInfo.Provider;

        string useCall = provider switch
        {
            "SqlServer" => "UseSqlServer",
            "Oracle" => "UseOracle",
            _ => "UseOracle"
        };

        string connName = ctx.Replace("DbContext", "Connection");
#>
        services.AddDbContext<<#= ctx #>>(options =>
            options.<#= useCall #>(
                configuration.GetConnectionString("<#= connName #>"),
                optionsBuilder => optionsBuilder.MigrationsAssembly(typeof(<#= ctx #>).Assembly.FullName)
            )
        );
<#
    }
#>
        return services;
    }
}