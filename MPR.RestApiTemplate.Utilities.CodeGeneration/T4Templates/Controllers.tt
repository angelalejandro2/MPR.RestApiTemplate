<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
using Asp.Versioning;
using Microsoft.AspNetCore.Mvc;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Application.Services;

namespace MPR.RestApiTemplate.Api.Controllers
{
<#
    string entitiesPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Domain\Entities");
    var entityFiles = Directory.GetFiles(entitiesPath, "*.cs");

    foreach (var file in entityFiles)
    {
        string className = Path.GetFileNameWithoutExtension(file);
        string dtoName = className + "Dto";
        string createDto = className + "CreateDto";
        string updateDto = className + "UpdateDto";
        string lowerName = char.ToLower(className[0]) + className.Substring(1);
        var lines = File.ReadAllLines(file);

        bool isKeyless = lines.Any(l => l.Trim().StartsWith("[Keyless]"));

        var keyProps = new List<(string Type, string Name)>();
        bool nextIsKey = false;

        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("[Key]"))
            {
                nextIsKey = true;
                continue;
            }

            if (nextIsKey && trimmed.StartsWith("public") && trimmed.Contains("{ get;"))
            {
                var parts = trimmed.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length >= 3)
                {
                    string type = parts[1];
                    string name = parts[2].Split('{')[0].Replace(";", "").Trim();
                    keyProps.Add((type, name));
                }
                nextIsKey = false;
            }
        }

        string routeParams = string.Join("/", keyProps.Select(p => $"{{{char.ToLower(p.Name[0]) + p.Name.Substring(1)}}}"));
        string methodParams = string.Join(", ", keyProps.Select(p => $"{p.Type} {char.ToLower(p.Name[0]) + p.Name.Substring(1)}"));
        string paramArgs = string.Join(", ", keyProps.Select(p => $"{char.ToLower(p.Name[0]) + p.Name.Substring(1)}"));
        string keyObject = string.Join(", ", keyProps.Select(p => $"{p.Name} = result.{p.Name}"));
#>
    [ApiController]
    [ApiVersion("1.0")]
    [Route("api/v{version:apiVersion}/[controller]")]
    public partial class <#= className #>Controller : ControllerBase
    {
        private readonly <#= className #>Service _service;

        public <#= className #>Controller(<#= className #>Service service)
        {
            _service = service;
        }

        [HttpGet]
        public virtual async Task<ActionResult<IEnumerable<<#= dtoName #>>>> GetAllAsync()
        {
            var result = await _service.GetAllAsync();
            return Ok(result);
        }
<#
    if (!isKeyless && keyProps.Any())
    {
#>
        [HttpGet("<#= routeParams #>")]
        public virtual async Task<ActionResult<<#= dtoName #>>> GetById(<#= methodParams #>)
        {
            var result = await _service.GetByIdAsync(<#= paramArgs #>);
            if (result == null)
                return NotFound();
            return Ok(result);
        }

        [HttpDelete("<#= routeParams #>")]
        public virtual async Task<ActionResult> DeleteAsync(<#= methodParams #>)
        {
            await _service.DeleteAsync(<#= paramArgs #>);
            return NoContent();
        }

        [HttpPut("<#= routeParams #>")]
        public virtual async Task<ActionResult<<#= dtoName #>>> UpdateAsync(<#= methodParams #>, [FromBody] <#= updateDto #> model)
        {
<#
    foreach (var key in keyProps)
    {
        var paramName = char.ToLower(key.Name[0]) + key.Name.Substring(1);
#>
            if (model.<#= key.Name #> != <#= paramName #>)
                return BadRequest("Key mismatch between route and payload");
<#
    }
#>
            var result = await _service.UpdateAsync(model);
            return Accepted(result);
        }

        [HttpPost]
        public virtual async Task<ActionResult<<#= dtoName #>>> AddAsync([FromBody] <#= createDto #> model)
        {
            var result = await _service.AddAsync(model);
            return CreatedAtAction(nameof(GetById), new { <#= keyObject #> }, result);
        }
<#
    }
#>
    }
<#
    }
#>
}