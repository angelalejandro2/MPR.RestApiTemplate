<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ include file="..\T4Includes\MprCodegenParser.ttinclude" #>
<#
    // Crear una instancia del MprCodegenParser para leer la configuración
    var parser = new MprCodegenParser(Host.TemplateFile, @"..\mpr.codegen.json");
    
    // Función para obtener el nombre personalizado de la entidad desde mpr.codegen.json
    string GetCustomEntityName(string entityName, MprCodegenParser parser)
    {
        try
        {
            // Obtenemos los nombres de DTO para aprovechar la lógica que ya existe en el parser
            var (dtoName, _, _) = parser.GetDtoNames(entityName);
            
            // Extraer el nombre base de la entidad del nombre del DTO (quitando "Dto" del final)
            string customName = dtoName.EndsWith("Dto") ? dtoName.Substring(0, dtoName.Length - 3) : dtoName;
            
            return string.IsNullOrEmpty(customName) ? entityName : customName;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error al obtener nombre personalizado: {ex.Message}");
            return entityName;
        }
    }

    // Función para generar el contenido del controlador para una entidad específica
    string GenerateControllerContent(string entityName, List<(string Type, string Name)> keyProps, bool isKeyless, MprCodegenParser parser)
    {
        // Obtener el nombre personalizado de la entidad desde la configuración
        string customEntityName = GetCustomEntityName(entityName, parser);
        
        // Obtener los nombres de DTO configurados o por defecto
        var (dtoName, createDtoName, updateDtoName) = parser.GetDtoNames(entityName);
        
        string lowerName = char.ToLower(customEntityName[0]) + customEntityName.Substring(1);
        
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("using Asp.Versioning;");
        sb.AppendLine("using Microsoft.AspNetCore.Mvc;");
        sb.AppendLine("using MPR.RestApiTemplate.Application.DTOs;");
        sb.AppendLine("using MPR.RestApiTemplate.Application.Services;");
        sb.AppendLine("");
        sb.AppendLine("namespace MPR.RestApiTemplate.Api.Controllers");
        sb.AppendLine("{");
        sb.AppendLine("    [ApiController]");
        sb.AppendLine("    [ApiVersion(\"1.0\")]");
        sb.AppendLine("    [Route(\"api/v{version:apiVersion}/[controller]\")]");
        sb.AppendLine($"    public partial class {customEntityName}Controller : ControllerBase");
        sb.AppendLine("    {");
        sb.AppendLine($"        private readonly {customEntityName}Service _service;");
        sb.AppendLine("");
        sb.AppendLine($"        public {customEntityName}Controller({customEntityName}Service service)");
        sb.AppendLine("        {");
        sb.AppendLine("            _service = service;");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        [HttpGet]");
        sb.AppendLine($"        public virtual async Task<ActionResult<IEnumerable<{dtoName}>>> GetAllAsync()");
        sb.AppendLine("        {");
        sb.AppendLine("            var result = await _service.GetAllAsync();");
        sb.AppendLine("            return Ok(result);");
        sb.AppendLine("        }");

        // Si la entidad tiene claves primarias
        if (!isKeyless && keyProps.Any())
        {
            string routeParams = string.Join("/", keyProps.Select(p => $"{{{char.ToLower(p.Name[0]) + p.Name.Substring(1)}}}"));
            string methodParams = string.Join(", ", keyProps.Select(p => $"{p.Type} {char.ToLower(p.Name[0]) + p.Name.Substring(1)}"));
            string paramArgs = string.Join(", ", keyProps.Select(p => $"{char.ToLower(p.Name[0]) + p.Name.Substring(1)}"));
            string keyObject = string.Join(", ", keyProps.Select(p => $"{p.Name} = result.{p.Name}"));

            sb.AppendLine("");
            sb.AppendLine($"        [HttpGet(\"{routeParams}\")]");
            sb.AppendLine($"        public virtual async Task<ActionResult<{dtoName}>> GetById({methodParams})");
            sb.AppendLine("        {");
            sb.AppendLine($"            var result = await _service.GetByIdAsync({paramArgs});");
            sb.AppendLine("            if (result == null)");
            sb.AppendLine("                return NotFound();");
            sb.AppendLine("            return Ok(result);");
            sb.AppendLine("        }");
            sb.AppendLine("");
            sb.AppendLine($"        [HttpDelete(\"{routeParams}\")]");
            sb.AppendLine($"        public virtual async Task<ActionResult> DeleteAsync({methodParams})");
            sb.AppendLine("        {");
            sb.AppendLine($"            await _service.DeleteAsync({paramArgs});");
            sb.AppendLine("            return NoContent();");
            sb.AppendLine("        }");
            sb.AppendLine("");
            sb.AppendLine($"        [HttpPut(\"{routeParams}\")]");
            sb.AppendLine($"        public virtual async Task<ActionResult<{dtoName}>> UpdateAsync({methodParams}, [FromBody] {updateDtoName} model)");
            sb.AppendLine("        {");

            // Validación de coincidencia de claves
            foreach (var key in keyProps)
            {
                var paramName = char.ToLower(key.Name[0]) + key.Name.Substring(1);
                sb.AppendLine($"            if (model.{key.Name} != {paramName})");
                sb.AppendLine("                return BadRequest(\"Key mismatch between route and payload\");");
            }

            sb.AppendLine("            var result = await _service.UpdateAsync(model);");
            sb.AppendLine("            return Accepted(result);");
            sb.AppendLine("        }");
            sb.AppendLine("");
            sb.AppendLine("        [HttpPost]");
            sb.AppendLine($"        public virtual async Task<ActionResult<{dtoName}>> AddAsync([FromBody] {createDtoName} model)");
            sb.AppendLine("        {");
            sb.AppendLine("            var result = await _service.AddAsync(model);");
            sb.AppendLine($"            return CreatedAtAction(nameof(GetById), new {{ {keyObject} }}, result);");
            sb.AppendLine("        }");
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }

    // Directorio donde se encuentran las entidades
    string entitiesPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Domain\Entities");
    // Directorio donde se guardarán los controladores generados
    string outputPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Api\Controllers\Generated");
    
    // Crear el directorio de salida si no existe
    if (!Directory.Exists(outputPath))
    {
        Directory.CreateDirectory(outputPath);
    }

    // Obtener todos los archivos de entidades
    var entityFiles = Directory.GetFiles(entitiesPath, "*.cs");

    // Para cada archivo de entidad, generar un controlador correspondiente
    foreach (var file in entityFiles)
    {
        string entityName = Path.GetFileNameWithoutExtension(file);
        var lines = File.ReadAllLines(file);

        bool isKeyless = lines.Any(l => l.Trim().StartsWith("[Keyless]"));

        var keyProps = new List<(string Type, string Name)>();
        bool nextIsKey = false;

        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("[Key]"))
            {
                nextIsKey = true;
                continue;
            }

            if (nextIsKey && trimmed.StartsWith("public") && trimmed.Contains("{ get;"))
            {
                var parts = trimmed.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length >= 3)
                {
                    string type = parts[1];
                    string name = parts[2].Split('{')[0].Replace(";", "").Trim();
                    keyProps.Add((type, name));
                }
                nextIsKey = false;
            }
        }

        // Obtener el nombre personalizado para el archivo de salida
        string customEntityName = GetCustomEntityName(entityName, parser);
        
        // Generar el contenido del controlador para esta entidad
        string controllerContent = GenerateControllerContent(entityName, keyProps, isKeyless, parser);
        
        // Escribir el contenido en un archivo independiente
        string outputFileName = $"{customEntityName}Controller.generated.cs";
        string outputFilePath = Path.Combine(outputPath, outputFileName);
        
        File.WriteAllText(outputFilePath, controllerContent);
    }
#>
// Esta plantilla ha generado controladores individuales para cada entidad.
// Los archivos generados se encuentran en la carpeta GeneratedControllers.
// Los nombres de DTOs personalizados se configuran en mpr.codegen.json