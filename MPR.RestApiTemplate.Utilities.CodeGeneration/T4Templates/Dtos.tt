<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#
    #nullable enable
    
    // Funci칩n para generar el contenido de la clase DTO
    string GenerateDtoClass(string className, List<(string Type, string Name, bool IsKey, string? DbGenerated, bool IsEntityReference)> properties)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// Autogenerated Code - Do not modify");
        sb.AppendLine("using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("using System.ComponentModel.DataAnnotations.Schema;");
        sb.AppendLine("");
        sb.AppendLine("namespace MPR.RestApiTemplate.Application.DTOs");
        sb.AppendLine("{");
        sb.AppendLine($"    public class {className}Dto");
        sb.AppendLine("    {");
        
        foreach (var prop in properties)
        {
            if (prop.IsKey)
            {
                sb.AppendLine("        [Key]");
            }
            if (!string.IsNullOrEmpty(prop.DbGenerated))
            {
                sb.AppendLine($"        {prop.DbGenerated}");
            }
            sb.AppendLine($"        public {prop.Type} {prop.Name} {{ get; set; }}");
        }
        
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
    
    // Funci칩n para generar el contenido de la clase CreateDto
    string GenerateCreateDtoClass(string className, List<(string Type, string Name, bool IsKey, string? DbGenerated, bool IsEntityReference)> properties)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// Autogenerated Code - Do not modify");
        sb.AppendLine("using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("using System.ComponentModel.DataAnnotations.Schema;");
        sb.AppendLine("");
        sb.AppendLine("namespace MPR.RestApiTemplate.Application.DTOs");
        sb.AppendLine("{");
        sb.AppendLine($"    public class {className}CreateDto");
        sb.AppendLine("    {");
        
        foreach (var prop in properties.Where(p => string.IsNullOrEmpty(p.DbGenerated) && !p.IsEntityReference))
        {
            sb.AppendLine($"        public {prop.Type} {prop.Name} {{ get; set; }}");
        }
        
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
    
    // Funci칩n para generar el contenido de la clase UpdateDto
    string GenerateUpdateDtoClass(string className, List<(string Type, string Name, bool IsKey, string? DbGenerated, bool IsEntityReference)> properties)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// Autogenerated Code - Do not modify");
        sb.AppendLine("using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("using System.ComponentModel.DataAnnotations.Schema;");
        sb.AppendLine("");
        sb.AppendLine("namespace MPR.RestApiTemplate.Application.DTOs");
        sb.AppendLine("{");
        sb.AppendLine($"    public class {className}UpdateDto");
        sb.AppendLine("    {");
        
        foreach (var prop in properties.Where(p => !p.IsEntityReference && (string.IsNullOrEmpty(p.DbGenerated) || p.IsKey)))
        {
            sb.AppendLine($"        public {prop.Type} {prop.Name} {{ get; set; }}");
        }
        
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
    
    // Directorio donde se encuentran las entidades
    string entitiesPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Domain\Entities");
    
    // Directorio donde se guardar치n los DTOs generados
    string outputPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Application\Dtos\GeneratedDtos");
    
    // Crear el directorio de salida si no existe
    if (!Directory.Exists(outputPath))
    {
        Directory.CreateDirectory(outputPath);
    }
    
    var entityFiles = Directory.GetFiles(entitiesPath, "*.cs");
    var entityNames = entityFiles.Select(f => Path.GetFileNameWithoutExtension(f)).ToHashSet();

    foreach (var file in entityFiles)
    {
        var className = Path.GetFileNameWithoutExtension(file);
        var lines = File.ReadAllLines(file);

        var properties = new List<(string Type, string Name, bool IsKey, string? DbGenerated, bool IsEntityReference)>();

        bool nextIsKey = false;
        string? nextDatabaseGenerated = null;
        
        foreach (var line in lines)
        {
            var trimmed = line.Trim();

            if (trimmed.StartsWith("[Key]"))
            {
                nextIsKey = true;
                continue;
            }

            if (trimmed.StartsWith("[DatabaseGenerated"))
            {
                nextDatabaseGenerated = trimmed;
                continue;
            }

            if (trimmed.StartsWith("public") && trimmed.Contains("{ get;") && !trimmed.Contains("class"))
            {
                var cleanLine = trimmed.Replace("virtual", "").Trim();
                var parts = cleanLine.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                if (parts.Length >= 3)
                {
                    string rawType = parts[1];
                    string rawName = parts[2].Split(new[] { '{', ';' }, StringSplitOptions.RemoveEmptyEntries)[0].Trim();

                    string type = rawType.EndsWith("?") ? rawType : rawType;

                    string modelType;
                    string baseType = type.TrimEnd('?');
                    bool isEntityReference = false;

                    var match = Regex.Match(type, @"^(?<collection>\w+)<(?<inner>\w+)>$");
                    if (match.Success)
                    {
                        var collectionType = match.Groups["collection"].Value;
                        var innerType = match.Groups["inner"].Value;
                        isEntityReference = entityNames.Contains(innerType);
                        var mappedInnerType = isEntityReference ? innerType + "Dto" : innerType;
                        modelType = $"{collectionType}<{mappedInnerType}>";
                    }
                    else
                    {
                        isEntityReference = entityNames.Contains(baseType);
                        modelType = isEntityReference ? baseType + "Dto" : type;
                    }

                    bool isKey = nextIsKey;
                    string? dbGenerated = nextDatabaseGenerated;

                    properties.Add((modelType, rawName, isKey, dbGenerated, isEntityReference));

                    nextIsKey = false;
                    nextDatabaseGenerated = null;
                }
            }
        }

        // Generar el archivo para la clase DTO principal
        string dtoContent = GenerateDtoClass(className, properties);
        string dtoFileName = $"{className}Dto.cs";
        string dtoFilePath = Path.Combine(outputPath, dtoFileName);
        
        // Verificar si el archivo ya existe antes de escribirlo
        if (!File.Exists(dtoFilePath))
        {
            File.WriteAllText(dtoFilePath, dtoContent);
        }
        
        // Si la entidad tiene clave primaria, crear los DTOs adicionales (Create y Update)
        if (properties.Any(p => p.IsKey))
        {
            // Generar el archivo para CreateDto
            string createDtoContent = GenerateCreateDtoClass(className, properties);
            string createDtoFileName = $"{className}CreateDto.cs";
            string createDtoFilePath = Path.Combine(outputPath, createDtoFileName);
            
            // Verificar si el archivo ya existe antes de escribirlo
            if (!File.Exists(createDtoFilePath))
            {
                File.WriteAllText(createDtoFilePath, createDtoContent);
            }
            
            // Generar el archivo para UpdateDto
            string updateDtoContent = GenerateUpdateDtoClass(className, properties);
            string updateDtoFileName = $"{className}UpdateDto.cs";
            string updateDtoFilePath = Path.Combine(outputPath, updateDtoFileName);
            
            // Verificar si el archivo ya existe antes de escribirlo
            if (!File.Exists(updateDtoFilePath))
            {
                File.WriteAllText(updateDtoFilePath, updateDtoContent);
            }
        }
    }
#>
// Esta plantilla ha generado archivos DTO individuales para cada entidad.
// Los archivos generados se encuentran en la carpeta GeneratedDTOs.
// Nota: Los archivos existentes no han sido sobrescritos.