<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
#nullable enable
/// <summary>
/// Devuelve un valor por defecto realista para cada tipo soportado, incluyendo claves no generadas automaticamente
/// </summary>

string GetDefaultValue(string type, string version)
{
    type = type.TrimEnd('?').ToLowerInvariant();

    return type switch
    {
        "string" => $"\"Test{version}\"",
        "int" => "-99",
        "long" => $"-99L",
        "short" => "(short)-99",
        "byte" => "(byte)-99",
        "decimal" => "-99.99m",
        "double" => "-99.99d",
        "float" => "-99.99f",
        "bool" => version == "1" ? "true" : "false",
        "DateTime" => "DateTime.UtcNow",
        "Guid" => "Guid.NewGuid()",
        _ => $"/* TODO: set value for {type} */ default"
    };
}


/// <summary>
/// Devuelve el nombre del tipo relacionado si la propiedad parece una foreign key (convencion: XyzId y Xyz es un Model conocido)
/// </summary>

string? GetRelatedModel(string propertyName, HashSet<string> knownModels)
{
    if (propertyName.EndsWith("Id"))
    {
        var candidate = propertyName.Substring(0, propertyName.Length - 2);
        if (knownModels.Contains(candidate + "Model"))
            return candidate;
    }
    return null;
}

#>