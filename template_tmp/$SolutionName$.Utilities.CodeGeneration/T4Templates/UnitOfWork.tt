// Autogenerated Code - Do not implement custom logic here. 
// Implement custom logic in partial class

<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
using MPR.RestApiTemplate.Domain.Interfaces;
using MPR.RestApiTemplate.Domain.Interfaces.Repositories;
using MPR.RestApiTemplate.Infrastructure.Context;
using MPR.RestApiTemplate.Infrastructure.Repositories;

namespace MPR.RestApiTemplate.Infrastructure
{
<#
	var dbContextPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"..\..\MPR.RestApiTemplate.Infrastructure\Context");
	var dbContexts = Directory.GetFiles(dbContextPath, "*.cs");

	StringBuilder sbContextParams = new();
	StringBuilder sbContextPrivates = new();
	StringBuilder sbContextSaves = new();
	StringBuilder sbContextDisposes = new();
	StringBuilder sbContextAffectedRows = new();
	foreach (var dbContext in dbContexts)
	{	
		var dbContextName = Path.GetFileNameWithoutExtension(dbContext);
		var dbContextNameLowered = char.ToLower(dbContextName[0]) + dbContextName.Substring(1);

		sbContextParams.Append($"{dbContextName} {dbContextNameLowered}, ");
		sbContextPrivates.AppendLine($"private readonly {dbContextName} _{dbContextNameLowered} = {dbContextNameLowered};");
		sbContextSaves.AppendLine($"int {dbContextNameLowered}AffectedRows =  await _{dbContextNameLowered}.SaveChangesAsync();");
		sbContextDisposes.AppendLine($"_{dbContextNameLowered}.Dispose();");
		sbContextAffectedRows.AppendLine($"totalAffectedRows += {dbContextNameLowered}AffectedRows;");
	}

	var dbContextsParams = sbContextParams.ToString().Trim().TrimEnd(',');
	var dbContextsPrivates = sbContextPrivates.ToString().Trim();
	var dbContextsSaves = sbContextSaves.ToString().Trim();
	var dbContextsDisposes = sbContextDisposes.ToString().Trim();
	var dbContextsAffectedRows = sbContextAffectedRows.ToString().Trim();
#>
	public partial class UnitOfWork(<#= dbContextsParams #>): IUnitOfWork
	{
		<#= dbContextsPrivates.Trim() #>

<#	
	foreach (var dbContext in dbContexts)
	{	
		var dbContextName = Path.GetFileNameWithoutExtension(dbContext);
		var dbContextNameLowered = char.ToLower(dbContextName[0]) + dbContextName.Substring(1);
		var dbContextCode = File.ReadAllText(dbContext);
		var matches = Regex.Matches(dbContextCode, @"DbSet<(?<entity>\w+)>");
		var entityNames = matches.Cast<Match>().Select(m => m.Groups["entity"].Value).Distinct().ToList();

		foreach (var entityName in entityNames)
		{
			var entityNameLowered = char.ToLower(entityName[0]) + entityName.Substring(1);
#>
		private I<#= entityName #>Repository? _<#= entityNameLowered #>Repository;
<#
		}
	}
#>

<#
	foreach (var dbContext in dbContexts)
	{	
		var dbContextName = Path.GetFileNameWithoutExtension(dbContext);
		var dbContextNameLowered = char.ToLower(dbContextName[0]) + dbContextName.Substring(1);
		var dbContextCode = File.ReadAllText(dbContext);
		var matches = Regex.Matches(dbContextCode, @"DbSet<(?<entity>\w+)>");
		var entityNames = matches.Cast<Match>().Select(m => m.Groups["entity"].Value).Distinct().ToList();

		foreach (var entityName in entityNames)
		{
			var entityNameLowered = char.ToLower(entityName[0]) + entityName.Substring(1);
#>
		public I<#= entityName #>Repository <#= entityName #>Repository => _<#= entityNameLowered #>Repository ??= new <#= entityName #>Repository(_<#= dbContextNameLowered #>);
<#
		}
	}
#>

		public virtual async Task<int> SaveChangesAsync() {
			<#= dbContextsSaves #>

			int totalAffectedRows = 0;
			<#= dbContextsAffectedRows #>

			return totalAffectedRows;
		}

		public virtual void Dispose()
		{
			<#= dbContextsDisposes #>
			GC.SuppressFinalize(this);
		}
	}
}