// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class CustomerService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public CustomerService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<CustomerDto>> GetAllAsync(params Expression<Func<Customer, object>>[] includes)
        {
            var entities = await _unitOfWork.CustomerRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<CustomerDto>>(entities);
        }

        public virtual async Task<CustomerDto> GetByIdAsync(string customerID, params Expression<Func<Customer, object>>[] includes)
        {
            var entity = await _unitOfWork.CustomerRepository.GetByIdAsync(new object[] { customerID }, includes);
            return _mapper.Map<CustomerDto>(entity);
        }

        public virtual async Task DeleteAsync(string customerID)
        {
            await _unitOfWork.CustomerRepository.DeleteAsync(customerID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<CustomerDto> AddAsync(CustomerCreateDto model)
        {
            var entity = _mapper.Map<Customer>(model);
            entity = await _unitOfWork.CustomerRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CustomerDto>(entity);
        }

        public virtual async Task<CustomerDto> UpdateAsync(CustomerUpdateDto model)
        {
            var entity = _mapper.Map<Customer>(model);
            entity = await _unitOfWork.CustomerRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CustomerDto>(entity);
        }
    }
}
