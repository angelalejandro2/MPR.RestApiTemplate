// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class EmployeeService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public EmployeeService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<EmployeeDto>> GetAllAsync(params Expression<Func<Employee, object>>[] includes)
        {
            var entities = await _unitOfWork.EmployeeRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<EmployeeDto>>(entities);
        }

        public virtual async Task<EmployeeDto> GetByIdAsync(int employeeID, params Expression<Func<Employee, object>>[] includes)
        {
            var entity = await _unitOfWork.EmployeeRepository.GetByIdAsync(new object[] { employeeID }, includes);
            return _mapper.Map<EmployeeDto>(entity);
        }

        public virtual async Task DeleteAsync(int employeeID)
        {
            await _unitOfWork.EmployeeRepository.DeleteAsync(employeeID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<EmployeeDto> AddAsync(EmployeeCreateDto model)
        {
            var entity = _mapper.Map<Employee>(model);
            entity = await _unitOfWork.EmployeeRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<EmployeeDto>(entity);
        }

        public virtual async Task<EmployeeDto> UpdateAsync(EmployeeUpdateDto model)
        {
            var entity = _mapper.Map<Employee>(model);
            entity = await _unitOfWork.EmployeeRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<EmployeeDto>(entity);
        }
    }
}
