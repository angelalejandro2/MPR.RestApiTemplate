// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class OrderService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public OrderService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<OrderDto>> GetAllAsync(params Expression<Func<Order, object>>[] includes)
        {
            var entities = await _unitOfWork.OrderRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<OrderDto>>(entities);
        }

        public virtual async Task<OrderDto> GetByIdAsync(int orderID, params Expression<Func<Order, object>>[] includes)
        {
            var entity = await _unitOfWork.OrderRepository.GetByIdAsync(new object[] { orderID }, includes);
            return _mapper.Map<OrderDto>(entity);
        }

        public virtual async Task DeleteAsync(int orderID)
        {
            await _unitOfWork.OrderRepository.DeleteAsync(orderID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<OrderDto> AddAsync(OrderCreateDto model)
        {
            var entity = _mapper.Map<Order>(model);
            entity = await _unitOfWork.OrderRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<OrderDto>(entity);
        }

        public virtual async Task<OrderDto> UpdateAsync(OrderUpdateDto model)
        {
            var entity = _mapper.Map<Order>(model);
            entity = await _unitOfWork.OrderRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<OrderDto>(entity);
        }
    }
}
