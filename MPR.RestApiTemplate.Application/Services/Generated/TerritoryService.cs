// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class TerritoryService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public TerritoryService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<TerritoryDto>> GetAllAsync(params Expression<Func<Territory, object>>[] includes)
        {
            var entities = await _unitOfWork.TerritoryRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<TerritoryDto>>(entities);
        }

        public virtual async Task<TerritoryDto> GetByIdAsync(string territoryID, params Expression<Func<Territory, object>>[] includes)
        {
            var entity = await _unitOfWork.TerritoryRepository.GetByIdAsync(new object[] { territoryID }, includes);
            return _mapper.Map<TerritoryDto>(entity);
        }

        public virtual async Task DeleteAsync(string territoryID)
        {
            await _unitOfWork.TerritoryRepository.DeleteAsync(territoryID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<TerritoryDto> AddAsync(TerritoryCreateDto model)
        {
            var entity = _mapper.Map<Territory>(model);
            entity = await _unitOfWork.TerritoryRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<TerritoryDto>(entity);
        }

        public virtual async Task<TerritoryDto> UpdateAsync(TerritoryUpdateDto model)
        {
            var entity = _mapper.Map<Territory>(model);
            entity = await _unitOfWork.TerritoryRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<TerritoryDto>(entity);
        }
    }
}
