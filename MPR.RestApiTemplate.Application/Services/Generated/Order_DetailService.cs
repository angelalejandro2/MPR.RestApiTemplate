// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class Order_DetailService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public Order_DetailService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<Order_DetailDto>> GetAllAsync(params Expression<Func<Order_Detail, object>>[] includes)
        {
            var entities = await _unitOfWork.Order_DetailRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<Order_DetailDto>>(entities);
        }

        public virtual async Task<Order_DetailDto> GetByIdAsync(int orderID, int productID, params Expression<Func<Order_Detail, object>>[] includes)
        {
            var entity = await _unitOfWork.Order_DetailRepository.GetByIdAsync(new object[] { orderID, productID }, includes);
            return _mapper.Map<Order_DetailDto>(entity);
        }

        public virtual async Task DeleteAsync(int orderID, int productID)
        {
            await _unitOfWork.Order_DetailRepository.DeleteAsync(orderID, productID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<Order_DetailDto> AddAsync(Order_DetailCreateDto model)
        {
            var entity = _mapper.Map<Order_Detail>(model);
            entity = await _unitOfWork.Order_DetailRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<Order_DetailDto>(entity);
        }

        public virtual async Task<Order_DetailDto> UpdateAsync(Order_DetailUpdateDto model)
        {
            var entity = _mapper.Map<Order_Detail>(model);
            entity = await _unitOfWork.Order_DetailRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<Order_DetailDto>(entity);
        }
    }
}
