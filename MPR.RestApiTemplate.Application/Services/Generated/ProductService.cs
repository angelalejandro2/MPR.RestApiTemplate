// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class ProductService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public ProductService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<ProductDto>> GetAllAsync(params Expression<Func<Product, object>>[] includes)
        {
            var entities = await _unitOfWork.ProductRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<ProductDto>>(entities);
        }

        public virtual async Task<ProductDto> GetByIdAsync(int productID, params Expression<Func<Product, object>>[] includes)
        {
            var entity = await _unitOfWork.ProductRepository.GetByIdAsync(new object[] { productID }, includes);
            return _mapper.Map<ProductDto>(entity);
        }

        public virtual async Task DeleteAsync(int productID)
        {
            await _unitOfWork.ProductRepository.DeleteAsync(productID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<ProductDto> AddAsync(ProductCreateDto model)
        {
            var entity = _mapper.Map<Product>(model);
            entity = await _unitOfWork.ProductRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<ProductDto>(entity);
        }

        public virtual async Task<ProductDto> UpdateAsync(ProductUpdateDto model)
        {
            var entity = _mapper.Map<Product>(model);
            entity = await _unitOfWork.ProductRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<ProductDto>(entity);
        }
    }
}
