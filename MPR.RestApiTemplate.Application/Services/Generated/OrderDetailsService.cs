// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class OrderDetailsService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public OrderDetailsService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<OrderDetailsDto>> GetAllAsync(params Expression<Func<OrderDetails, object>>[] includes)
        {
            var entities = await _unitOfWork.OrderDetailsRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<OrderDetailsDto>>(entities);
        }

        public virtual async Task<OrderDetailsDto> GetByIdAsync(int orderId, int productId, params Expression<Func<OrderDetails, object>>[] includes)
        {
            var entity = await _unitOfWork.OrderDetailsRepository.GetByIdAsync(new object[] { orderId, productId }, includes);
            return _mapper.Map<OrderDetailsDto>(entity);
        }

        public virtual async Task DeleteAsync(int orderId, int productId)
        {
            await _unitOfWork.OrderDetailsRepository.DeleteAsync(orderId, productId);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<OrderDetailsDto> AddAsync(OrderDetailsCreateDto model)
        {
            var entity = _mapper.Map<OrderDetails>(model);
            entity = await _unitOfWork.OrderDetailsRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<OrderDetailsDto>(entity);
        }

        public virtual async Task<OrderDetailsDto> UpdateAsync(OrderDetailsUpdateDto model)
        {
            var entity = _mapper.Map<OrderDetails>(model);
            entity = await _unitOfWork.OrderDetailsRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<OrderDetailsDto>(entity);
        }
    }
}
