// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class CustomerDemographicService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public CustomerDemographicService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<CustomerDemographicDto>> GetAllAsync(params Expression<Func<CustomerDemographic, object>>[] includes)
        {
            var entities = await _unitOfWork.CustomerDemographicRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<CustomerDemographicDto>>(entities);
        }

        public virtual async Task<CustomerDemographicDto> GetByIdAsync(string customerTypeID, params Expression<Func<CustomerDemographic, object>>[] includes)
        {
            var entity = await _unitOfWork.CustomerDemographicRepository.GetByIdAsync(new object[] { customerTypeID }, includes);
            return _mapper.Map<CustomerDemographicDto>(entity);
        }

        public virtual async Task DeleteAsync(string customerTypeID)
        {
            await _unitOfWork.CustomerDemographicRepository.DeleteAsync(customerTypeID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<CustomerDemographicDto> AddAsync(CustomerDemographicCreateDto model)
        {
            var entity = _mapper.Map<CustomerDemographic>(model);
            entity = await _unitOfWork.CustomerDemographicRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CustomerDemographicDto>(entity);
        }

        public virtual async Task<CustomerDemographicDto> UpdateAsync(CustomerDemographicUpdateDto model)
        {
            var entity = _mapper.Map<CustomerDemographic>(model);
            entity = await _unitOfWork.CustomerDemographicRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CustomerDemographicDto>(entity);
        }
    }
}
