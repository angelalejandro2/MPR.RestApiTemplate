// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class CategoryService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public CategoryService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<CategoryDto>> GetAllAsync(params Expression<Func<Category, object>>[] includes)
        {
            var entities = await _unitOfWork.CategoryRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<CategoryDto>>(entities);
        }

        public virtual async Task<CategoryDto> GetByIdAsync(int categoryID, params Expression<Func<Category, object>>[] includes)
        {
            var entity = await _unitOfWork.CategoryRepository.GetByIdAsync(new object[] { categoryID }, includes);
            return _mapper.Map<CategoryDto>(entity);
        }

        public virtual async Task DeleteAsync(int categoryID)
        {
            await _unitOfWork.CategoryRepository.DeleteAsync(categoryID);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<CategoryDto> AddAsync(CategoryCreateDto model)
        {
            var entity = _mapper.Map<Category>(model);
            entity = await _unitOfWork.CategoryRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CategoryDto>(entity);
        }

        public virtual async Task<CategoryDto> UpdateAsync(CategoryUpdateDto model)
        {
            var entity = _mapper.Map<Category>(model);
            entity = await _unitOfWork.CategoryRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CategoryDto>(entity);
        }
    }
}
