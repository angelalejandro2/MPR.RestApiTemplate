// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class CustomersService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public CustomersService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<CustomersDto>> GetAllAsync(params Expression<Func<Customers, object>>[] includes)
        {
            var entities = await _unitOfWork.CustomersRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<CustomersDto>>(entities);
        }

        public virtual async Task<CustomersDto> GetByIdAsync(string customerId, params Expression<Func<Customers, object>>[] includes)
        {
            var entity = await _unitOfWork.CustomersRepository.GetByIdAsync(new object[] { customerId }, includes);
            return _mapper.Map<CustomersDto>(entity);
        }

        public virtual async Task DeleteAsync(string customerId)
        {
            await _unitOfWork.CustomersRepository.DeleteAsync(customerId);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<CustomersDto> AddAsync(CustomersCreateDto model)
        {
            var entity = _mapper.Map<Customers>(model);
            entity = await _unitOfWork.CustomersRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CustomersDto>(entity);
        }

        public virtual async Task<CustomersDto> UpdateAsync(CustomersUpdateDto model)
        {
            var entity = _mapper.Map<Customers>(model);
            entity = await _unitOfWork.CustomersRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<CustomersDto>(entity);
        }
    }
}
