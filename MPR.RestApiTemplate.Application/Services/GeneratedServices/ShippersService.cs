// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class ShippersService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public ShippersService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<ShippersDto>> GetAllAsync(params Expression<Func<Shippers, object>>[] includes)
        {
            var entities = await _unitOfWork.ShippersRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<ShippersDto>>(entities);
        }

        public virtual async Task<ShippersDto> GetByIdAsync(int shipperId, params Expression<Func<Shippers, object>>[] includes)
        {
            var entity = await _unitOfWork.ShippersRepository.GetByIdAsync(new object[] { shipperId }, includes);
            return _mapper.Map<ShippersDto>(entity);
        }

        public virtual async Task DeleteAsync(int shipperId)
        {
            await _unitOfWork.ShippersRepository.DeleteAsync(shipperId);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<ShippersDto> AddAsync(ShippersCreateDto model)
        {
            var entity = _mapper.Map<Shippers>(model);
            entity = await _unitOfWork.ShippersRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<ShippersDto>(entity);
        }

        public virtual async Task<ShippersDto> UpdateAsync(ShippersUpdateDto model)
        {
            var entity = _mapper.Map<Shippers>(model);
            entity = await _unitOfWork.ShippersRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<ShippersDto>(entity);
        }
    }
}
