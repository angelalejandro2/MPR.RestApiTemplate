// Autogenerated Code - Do not modify
using AutoMapper;
using MPR.RestApiTemplate.Application.DTOs;
using MPR.RestApiTemplate.Domain.Entities;
using MPR.RestApiTemplate.Domain.Interfaces;
using System.Linq.Expressions;

namespace MPR.RestApiTemplate.Application.Services
{
    public partial class TerritoriesService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public TerritoriesService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public virtual async Task<IEnumerable<TerritoriesDto>> GetAllAsync(params Expression<Func<Territories, object>>[] includes)
        {
            var entities = await _unitOfWork.TerritoriesRepository.GetAllAsync(includes);
            return _mapper.Map<IEnumerable<TerritoriesDto>>(entities);
        }

        public virtual async Task<TerritoriesDto> GetByIdAsync(string territoryId, params Expression<Func<Territories, object>>[] includes)
        {
            var entity = await _unitOfWork.TerritoriesRepository.GetByIdAsync(new object[] { territoryId }, includes);
            return _mapper.Map<TerritoriesDto>(entity);
        }

        public virtual async Task DeleteAsync(string territoryId)
        {
            await _unitOfWork.TerritoriesRepository.DeleteAsync(territoryId);
            await _unitOfWork.SaveChangesAsync();
        }

        public virtual async Task<TerritoriesDto> AddAsync(TerritoriesCreateDto model)
        {
            var entity = _mapper.Map<Territories>(model);
            entity = await _unitOfWork.TerritoriesRepository.AddAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<TerritoriesDto>(entity);
        }

        public virtual async Task<TerritoriesDto> UpdateAsync(TerritoriesUpdateDto model)
        {
            var entity = _mapper.Map<Territories>(model);
            entity = await _unitOfWork.TerritoriesRepository.UpdateAsync(entity);
            await _unitOfWork.SaveChangesAsync();
            return _mapper.Map<TerritoriesDto>(entity);
        }
    }
}
